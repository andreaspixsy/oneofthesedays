<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>One of These Days</title>
 <link href="http://oneofthesedaysblog.com/feed/" rel="self"/>
 <link href="http://oneofthesedaysblog.com/"/>
 <updated>2011-04-11T12:46:07+12:00</updated>
 <id>http://oneofthesedaysblog.com/</id>
 <author>
   <name>Sam Dalton</name>
   <email>mail@samdalton.co.nz</email>
 </author>

 
 <entry>
   <title>New Blog</title>
   <link href="http://oneofthesedaysblog.com/New-Blog"/>
   <updated>2011-04-06T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/New-Blog</id>
   <content type="html">&lt;tr id='section-One_of_These_Days,_this_blog_was_going_to_change'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-One_of_These_Days,_this_blog_was_going_to_change&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;One of These Days, this blog was going to change&lt;/h3&gt;

&lt;p&gt;Puns aside, I&amp;rsquo;ve now completely switched blogging platforms, migrating off of Wordpress to a custom &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; setup.
While wordpress was a seriously powerful platform, I was only using ~2% of its functionality, and that 2% wasn&amp;rsquo;t doing quite
what I wanted. Now, with Jekyll, running on Sinatra on Heroku, I can hack things to work as needed. For example, posts
can be pre-processed with &lt;a href=&quot;http://jashkenas.github.com/docco/&quot;&gt;Docco&lt;/a&gt; which creates the amazing styling on this page.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;and the amazing styling of source code, like this &amp;ndash;&gt;&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;reasons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;explain&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;I figured it was worth the switch just for this alone, as most of the time I&amp;rsquo;m talking about code.
I&amp;rsquo;m also hoping that the easiser method of posting (git push heroku master) will encourage me to write more frequently, so stay tuned!&lt;/p&gt;

&lt;p&gt;(I will be gradually migrating posts from the old blog over to here, which hopefully won&amp;rsquo;t take too long)&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Block Vs For In Objective C Enumeration</title>
   <link href="http://oneofthesedaysblog.com/block-vs-for-in-objective-c-enumeration"/>
   <updated>2011-04-01T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/block-vs-for-in-objective-c-enumeration</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;Having&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entirely&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;love&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;often&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myself&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wishing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;had&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;It&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s such an neat construct that leads to simplistic, elegant, and often more efficient code. During some work on an iPhone app, I had a need to iterate over the objects of a dictionary, getting both key and object for each pair. This is often done with a simple for loop, however the syntax was ugly and, in my opinion, wholly unnecessary:&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    NSArray* keys = [data allKeys];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  for (int i = 0; i &amp;lt; objCount; i++) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    [keys objectAtIndex:i];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    [data objectForKey:[keys objectAtIndex:i]];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    // do something cool, but boy is this a lot of typing..&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;5 lines just to get keys and objects from a dictionary? Crazy! Pining for another way, I delved into the documentation and pulled out this gem of a method - &amp;quot;enumerateKeysAndObjectsUsingBlock&amp;quot;.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;This does exactly what it sounds, and, oh what joy, it accepts a block. &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    [data enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        // do something cool as we&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        // maybe I&amp;#39;ll grab a beer with the time I&amp;#39;ve saved on typing&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  }];&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;declared&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slightly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manageable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;According&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effectively&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;break&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 

&lt;span class=&quot;no&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve got our code looking pretty, how does it match up in performance? Curious, I ran a simple experiment.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    int objCount = 100000;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  NSMutableDictionary* data = [[NSMutableDictionary alloc] init];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  for (int i = 0; i &amp;lt; objCount; i++) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    [data setObject:@&amp;quot;test&amp;quot; forKey:[NSNumber numberWithInt:i]];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  }&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  int iterations = 100;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  NSDate *methodStart = [NSDate date];&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  for (int j = 0; j &amp;lt; iterations; j++) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    NSArray* keys = [data allKeys];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    for (int i = 0; i &amp;lt; objCount; i++) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      [keys objectAtIndex:i];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;      [data objectForKey:[keys objectAtIndex:i]];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  }&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  NSDate *methodFinish = [NSDate date];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  NSTimeInterval executionTime = [methodFinish timeIntervalSinceDate:methodStart];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  float forTime = executionTime / iterations;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  NSLog(@&amp;quot;Standard For Loop : %f&amp;quot;, forTime);&lt;/span&gt;




&lt;span class=&quot;s1&quot;&gt;  methodStart = [NSDate date];&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  for (int j = 0; j &amp;lt; iterations; j++) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    [data enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;    }];		&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  }&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  methodFinish = [NSDate date];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  executionTime = [methodFinish timeIntervalSinceDate:methodStart];&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  float enumerableTime = executionTime / iterations;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  NSLog(@&amp;quot;Standard Enumerable Loop : %f&amp;quot;, enumerableTime);&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;  NSLog(@&amp;quot;Times Faster : %f&amp;quot;, forTime / enumerableTime);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Here we&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grabbing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;both&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;different&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attempt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eliminate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fluctuations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;due&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpredictable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caching&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re running each loop 100 times. (Note: I tried to run it 1000+ times, but it crashed probably as there are memory leaks galore in the code. Having said that, the memory leaks probably affect the run time as well, but I&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exercise&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Surprising&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&amp;lt;pre class=&amp;#39;brush:plain&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    2011-04-01 18:42:49.163 Standard For Loop : 0.025023&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    2011-04-01 18:42:49.616 Standard Enumerable Loop : 0.004506&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    2011-04-01 18:42:49.616 Times Faster : 5.553028&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FIVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faster&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;know&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Backbone Js Html5</title>
   <link href="http://oneofthesedaysblog.com/backbone-js-html5"/>
   <updated>2011-02-12T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/backbone-js-html5</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>Ruby Day 14 Tty L</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-14-tty-l"/>
   <updated>2011-01-22T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-14-tty-l</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alignright&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;234&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;#039;The Women&amp;amp;#039;s Army Corps: A Commemoration of World War II Service&amp;amp;#039;&amp;amp;#039; By Judith A. Bellafaire. CMH Publication 72-15&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://upload.wikimedia.org/wikipedia/commons/8/89/WACsOperateTeletype.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Teletypewriter&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;234&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;224&amp;quot;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&amp;gt;[/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rather&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abrupt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unfinished&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ending&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hopeful&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Without&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;further&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ado&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;involving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sending&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receiving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re going to need some way of telling the operating system what to do. Any modern OS has a set of system calls that are used to interact with the computer&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hardware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ensuring&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nothing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;untoward&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;might&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fwrite&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instruct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;also&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instruct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;however&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Let&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s look at an example to make the explanations easier.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;puts IO.popen(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Sat&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jan&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NZDT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2011&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;We can see that the output of the above line was today&amp;#39;s date and time, exactly as if we were to open the terminal and type in the UNIX &amp;#39;date&amp;#39; command. Note that we are calling the read command on the object we&amp;#39;ve created, exactly as if we were reading from a file. What&amp;#39;s going on here? popen, or process open, is a function in the Ruby IO library that instructs the OS to fire up a process with the given command (date, in this case). A process is similar to a file in that it can receive inputs and produce outputs, and so Ruby ensures theses two ends are available for use, just as if a file had been opened. The advantage of the IO library is that the API is fixed for whatever IO object you&amp;#39;re actually using. Be it a process, file, socket, pipe et al, the commands required for sending/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;popen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrieving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s date.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Let&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rather&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/drewcrawford/Phone-Pipe&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phonepipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;. You could run a similar example without this, a notifo account and a smart phone with push capabilities, but it&amp;#39;s rather satisfying to do it this way. Keep reading once you&amp;#39;ve got it set up and working.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;What we want to do is have Ruby send some text to our phone. A simple solution would be to simply have Ruby call &amp;#39;echo hello | phone&amp;#39;, which can be achieved using the shorthand %x syntax:&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;%x{ echo hello | phone} &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contained&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;causing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doesn&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t fit nicely with our IO examples however so let&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;phone&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello from process &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;Just as we opened up a process for date, we&amp;#39;re opening up a process for the phone command. The difference is that we&amp;#39;re specifying that we want to be able to write to it, just as we would write to a file. By passing it a block, we can do things with the returned process handle. Inside the block, we&amp;#39;re simply using puts to send our message to the phone process. You should see a message along the lines of &amp;quot;Hello from process ----&amp;quot; appear on your phone, where ---- is any number. While this is purely a contrived example, you can see just how easy it is to read and write to processes in Ruby. To show the flexibility of these, take a look at this example which opens up an interactive Ruby prompt inside the process and has it execute Ruby code:&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;IO.popen(&amp;#39;irb&amp;#39;, &amp;#39;w&amp;#39;) do |f|&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   f.puts &amp;quot;puts &amp;#39;hello&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;We&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re opening an irb process, and feeding it &amp;quot;puts &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot; which gets run by irb and executed. &amp;lt;br /&amp;gt;&amp;lt;em&amp;gt;Note: if someone can turn this into a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Quine_(computing)&amp;quot; title=&amp;quot;Quine (computing) - Wikipedia, the free encyclopedia&amp;quot;&amp;gt;quine&amp;lt;/a&amp;gt;, it would be awesome to see in the comments! Here&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/em&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;IO.popen(&amp;#39;irb&amp;#39;, &amp;#39;w&amp;#39;) do |f|&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   f.puts &amp;quot; IO.popen(&amp;#39;irb&amp;#39;, &amp;#39;w&amp;#39;) do |f|&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;       f.puts \&amp;quot;puts &amp;#39;hello&amp;#39;\&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    end&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Hopefully&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brief&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;piqued&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TTYL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TTY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;past&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Teletypewriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;magical&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digital&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;physical&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typewriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UNIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;named&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;along&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve opened (the first window would be tty0, and so on). While nothing to do with typewriters, the idea of printing text to a screen is somewhat similar to this, so if you don&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;think&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;too&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;much&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sense&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typical&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OSX&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Linux&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interfaces&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appear&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;them&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OSX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;know&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lives&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /dev/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttys001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/dev/ttys001&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello from Ruby!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;We&amp;#39;re using the File class in this case, not IO, to open up the tty file, but everything functions identically. If you have a terminal window up, you can check it&amp;#39;s tty file by viewing the terminal window&amp;#39;s properties. If it is indeed ttys001, you should see &amp;#39;Hello from Ruby!&amp;#39; appear on it. If it&amp;#39;s something else, replace the file name and similar results should occur.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;This is all well and good, but what can you do with it? Well, here&amp;#39;s a feeble attempt and what could be the beginnings of a game of pong:&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;width = 80&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;height = 20&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;length = 160&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;fps = 30&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;File.open(&amp;quot;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttys001&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;, &amp;#39;w&amp;#39;) do |f|&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   row = 0&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   increment = 1&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   (1..length).each do |i|&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      sleep(1.to_f/fps)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      f.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; # clear screen character&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      f.puts  &amp;quot;&amp;quot; + (&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; * row) + (&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; * (i % width)) + &amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      row += increment&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      if row &amp;gt; height&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;          increment = -1&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      elsif row &amp;lt; 1 &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;          increment = 1&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;That&amp;#39;s all for now, but give it a whirl, and be sure to post any cool uses/examples you have in the comments!&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>2010 And Beyond</title>
   <link href="http://oneofthesedaysblog.com/2010-and-beyond"/>
   <updated>2010-12-30T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/2010-and-beyond</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;being&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s time to write one of those summary posts. I&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brief!&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finishing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;degree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Software&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Engineering&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;starting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freelancing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;almost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overwhelming&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;learning&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wouldn&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t, however, change a second of it. Thanks especially to the people I&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;met&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meetups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;everywhere&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve all been amazing, and helped make the year an absolute blast. &lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Slightly drained now, I&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recuperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 

&lt;span class=&quot;no&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;those&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve visited me here I sincerely thank you, and I hope you&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stick&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hopefully&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interesting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;come!&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Sam&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>A Simple Jquery Dropdown Menu</title>
   <link href="http://oneofthesedaysblog.com/a-simple-jquery-dropdown-menu"/>
   <updated>2010-12-20T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/a-simple-jquery-dropdown-menu</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ago&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/pure-css-dropdown-for-firefox/&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Pure CSS Dropdown for Firefox | One Of These Days&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bare&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bones&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dropdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;. Given the widespread adoption of jQuery since then, there&amp;#39;s little reason to go for the CSS only approach (although it is perhaps more elegant). &amp;lt;a href=&amp;quot;http:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#!/tedawebguy&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;@tedawebguy&amp;lt;/a&amp;gt; suggested I write a post about a more modern version, so let&amp;#39;s go!&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;although&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve only tested it in Firefox and Chrome on OSX. Any problems with it will be simple styling issues.)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Here&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;nav&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;no&quot;&gt;Home&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;                    &amp;lt;li&amp;gt;Link 2&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;            &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;            &amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;                Blog&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;                &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;                    &amp;lt;li&amp;gt;Blog 1&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Blog&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;                &amp;lt;/u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;            &amp;lt;li&amp;gt;Contact&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nested&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Blog&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sublists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;their&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hovered&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arbitrary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nesting&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;styling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fairly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:css&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;The first style removes the bullets from our list, gives it a reasonable height and padding to ensure that the hover area is user-friendly enough.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:css&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    ul li {&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        display:inline;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        padding:4px 50px;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        border:1px solid #555555;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        cursor:pointer;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        margin:2px;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        position:relative;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re styling the list elements, making them display inline and giving them a bit of padding and spacing. The border and cursor is not essential, but it makes it easier to see where to hover. Lastly, we&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;giving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;below&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hovering&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:css&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;To finish our CSS, we&amp;#39;re styling the second level list. It&amp;#39;s hidden to start with, and given an absolute position just below the top level list. The negative left position may cause some alignment problems in IE, but it&amp;#39;s there to offset the indent that browsers put on list elements. &lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;Now that we&amp;#39;ve structured and styled our navigation menu, we can sprinkle some javascript over it. &lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:javascript&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    &amp;lt;script src=&amp;#39;https:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;googleapis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    &amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        $(function() {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            $(&amp;quot;#nav li&amp;quot;).hover(&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                function() {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                    $(this).find(&amp;quot;ul&amp;quot;).fadeIn(100);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                }, &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                function() {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                    $(this).find(&amp;quot;ul&amp;quot;).fadeOut(100);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                });&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            });&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    &amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;We&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;including&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Google&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hosted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;best&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;practices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kicking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortcut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gives&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re then setting up a hover event listener on each list element in the top level list. This takes 2 callbacks, one for mouse over and one for mouse out. On mouse over, we&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reside&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subsequently&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;easier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eyes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;also&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;few&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increases&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usability&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accurate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 

&lt;span class=&quot;no&quot;&gt;Plugging&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;these&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;together&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gives&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;following&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/12/Screen-shot-2010-12-20-at-5.27.58-PM.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/12/Screen-shot-2010-12-20-at-5.27.58-PM.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dropdown pre-hover&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dropdown pre-hover&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;619&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;89&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;aligncenter size-full wp-image-402&amp;quot;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/12/Screen-shot-2010-12-20-at-5.29.59-PM.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/12/Screen-shot-2010-12-20-at-5.29.59-PM.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dropdown post-hover&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dropdown post-hover&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;611&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;83&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;aligncenter size-full wp-image-403&amp;quot;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flexible&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s a &amp;lt;a href=&amp;quot;http://www.1stwebdesigner.com/freebies/38-jquery-and-css-drop-down-multi-level-menu-solutions/&amp;quot; title=&amp;quot;38 jQuery And CSS Drop Down Multi Level Menu Solutions&amp;quot;&amp;gt;silly amount of libraries&amp;lt;/a&amp;gt; to be found on the web. Hopefully however, this post shows just how simple they are to construct, and may even be useful if you&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looking&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightweight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Backbone Js</title>
   <link href="http://oneofthesedaysblog.com/backbone-js"/>
   <updated>2010-11-20T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/backbone-js</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;attachment_395&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alignright&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;441&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Would you like extra spine with that?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/11/Screen-shot-2010-11-20-at-7.13.37-PM.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/11/Screen-shot-2010-11-20-at-7.13.37-PM.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Backbone JS&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Backbone JS&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;441&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;154&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;size-full wp-image-395&amp;quot;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Since&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrival&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://jquery.com/&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jQuery: The Write Less, Do More, JavaScript Library&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt; some years ago, there hasn&amp;#39;t been much else in the Javascript development landscape that has made things &amp;lt;a href=&amp;quot;http:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zurb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raptorize&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Raptorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awesome&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jQuery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unleahes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Raptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZURB&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Playground&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZURB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;more fun&amp;lt;/a&amp;gt;. &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentcloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backbone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;Backbone.js&amp;lt;/a&amp;gt; is a pleasant break from this period however, making JS work positively thrilling.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Backbone.js is a simple, very lightweight MVC framework built on jQuery and &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentcloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underscore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Underscore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;Underscore.js&amp;lt;/a&amp;gt;, a &amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;belt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Javascript&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;. As with any MVC framework, the core premise of Backbone is to separate an application&amp;#39;s representation and storage of data, from the presentation of it. 2 main classes provide this functionality, Backbone.Model and Backbone.View. The neat thing is that when you associate a view with a model, any changes to the model will be reflected in the view without you having to write any linking code. &lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;This sounds all well and good, but is it really that useful? Yes. Keen to get my teeth into it, I rewrote &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vitalgiftsapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Vital&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gifts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Good&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gifts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Great&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;People&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;Vital Gifts&amp;lt;/a&amp;gt; app with it. The process took less time than the initial version, and the end result was a marginally larger Javascript file that executed faster while saving a large proportion of my sanity. The reason for this usefulness stems from the modularity it lends to your application; you can easily create self contained visual elements that have all of the data persistence and manipulation they need, and place them onto the page with one line. To illustrate this modularity, let&amp;#39;s create a simple friend selector that could be easily fitted out to use the Facebook Graph API.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre class=&amp;#39;brush:javascript&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;window.User = Backbone.Model.extend({});&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;This creates an empty model that we can use to store information about the selected friend. Note that we&amp;#39;re not specifying any attributes such as name or photo. This is because the Backbone model is just a JSON object, and so no schema is necessary - we can add and fetch attributes however we see fit.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;In a typical MVC setup, the view would contain a template with rudimentary data manipulations. Any events received by the view are sent to the controller for processing, and then results are sent back to the view. Backbone &amp;#39;breaks&amp;#39; this model slightly by binding changes to the model directly with the view object. The results are still passable however, with the use of a template framework such as &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mustache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#123;&amp;amp;#123; mustache }}&amp;quot;&amp;gt;Mustache&amp;lt;/a&amp;gt;. We can use the Backbone view object for controller style logic, and keep the presentation in a template.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; // create a new model to store the selected user&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;    el : $(&amp;quot;#friend-selector&amp;quot;), /&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re using for the selector&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;    // we want to listen for 2 events on the text field&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    events : {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        &amp;quot;focus&amp;quot;     : &amp;quot;selectInput&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        &amp;quot;keyup&amp;quot;  : &amp;quot;friendSelected&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    },&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;This first section is all we need to get our view up and running. We tell the view what model it represents, what DOM element it is going to use, and we define a set of event/callback pairs to handle user interaction. To do the actual autocompletion we will use the &amp;lt;a href=&amp;quot;http://bassistance.de/jquery-plugins/jquery-plugin-autocomplete/&amp;quot; title=&amp;quot;bassistance.de &amp;amp;raquo; jQuery plugin: Autocomplete&amp;quot;&amp;gt;jQuery autocomplete library&amp;lt;/a&amp;gt;.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:javascript&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    initialize : function(friends) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        // set up autocomplete&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        this.el.autocomplete(friends, {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            minChars: 0,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            width: 310,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            matchContains: false,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            autoFill: false,&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            formatItem: function (row, i, max) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;               img = &amp;quot;&amp;lt;img src=&amp;#39;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; + row.picture + &amp;quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; width=&amp;#39;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; height=&amp;#39;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; alt=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; /&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;               return img + row.name;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            },&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            formatMatch: function (row, i, max) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;               return row.name;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            },&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            formatResult: function (row) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;               return row.name;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;       });&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;        // bind this object to the form, so we can access it from the result event&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        this.el.data(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, this);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        this.el.result(function(e, data, formatted) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            $(e.target).data(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;).autocompleteSelected(data);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        });&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    },&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;I won&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autocomplete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documentation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fairly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comprehensive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exactly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typical&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caveat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;however&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unfortunately&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ugly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autocomplete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;result&amp;#39;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;within&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;able&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;won&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t be in the scope of the autocomplete plugin however, so we are using the data property of the text field to store a reference to the view object. Both the autocomplete and the view model are attached to the same element so the data property acts like a form of shared memory.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:javascript&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    selectInput : function(e) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        $(e.target).select();&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    },&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;    autocompleteSelected : function(friend) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        if (friend != null) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            this.model.set({&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                name : friend.name&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            }); &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    },&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;    friendSelected : function(e) {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        this.model.set({&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;            name : this.el.val(),&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        });&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        this.el.search(); // see if they typed in a correct name&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;selectInput is purely a convenience for the user. It will result in the contents of the text field becoming highlighted when clicked on, making it easy to type in a new friend. It should save the user 1 click on average.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;autocompleteSelected is called when the user selects a friend that has been autocompleted. It calls &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; on the model and sets the name parameter to be the chosen friend&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;friendSelected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyUp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wants&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registered&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autocomplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;were&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autocomplete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;though&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;search&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autocomplete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forces&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t find it, we have already updated the model, keeping it consistent, and if it does find it, autocompleteSelected will be called and the model will still have the friend&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contained&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assumed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;friends&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;That&amp;#39;s it!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Hosting Your Rails App</title>
   <link href="http://oneofthesedaysblog.com/hosting-your-rails-app"/>
   <updated>2010-08-27T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/hosting-your-rails-app</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;So&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve got this sweet rails app made, and it runs fine locally, but you&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;able&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hosting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one?&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;So&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;far&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve used 2 different companies to host a rails app, &amp;lt;a href=&amp;quot;http://www.rackspace.com/index.php&amp;quot; title=&amp;quot;Dedicated Server, Managed Hosting, Web Hosting by Rackspace Hosting&amp;quot;&amp;gt;Rackspace&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://heroku.com/&amp;quot; title=&amp;quot;Heroku | Ruby Cloud Platform as a Service&amp;quot;&amp;gt;Heroku&amp;lt;/a&amp;gt;. I&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Heroku&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;couldn&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t be happier.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;a href=&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/08/Dedicated-Server-Managed-Hosting-Web-Hosting-from-Rackspace.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/08/Dedicated-Server-Managed-Hosting-Web-Hosting-from-Rackspace.png&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;Dedicated Server, Managed Hosting &amp;amp;amp; Web Hosting from Rackspace&amp;quot; width=&amp;quot;158&amp;quot; height=&amp;quot;60&amp;quot; class=&amp;quot;alignleft size-full wp-image-381&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;Let&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rackspace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;They&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re a large company with a lot of infrastructure and support. When they say that have &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fanatical&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, they really mean it. I needed their support 3 times during my time with them, and it took less than 5 minutes from identifying the problem, to talking with a real person from the company on how to fix my problem. They offer a 24/7 live chat service, and, living in New Zealand this is particularly useful as my 9AM is most web company&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;What&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;they&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;essentially&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtual&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;along&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;much&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Amazon&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s ubiquitous S3. Having an entirely blank server that you can install any OS and software on is a real charm. Instead of having too little control, you have too much control. If you&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sysadmin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geek&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bash&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;making&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probably&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wouldn&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t suit someone with limited server experience.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;I installed a typical LAMP stack, with Ubuntu 8.x as my distribution of choice. There really was no difference from setting up this server than if I were doing it on a local development machine, with the exception of DNS. Alongside setting up your /etc/hosts file, you will need to use a simple control panel to add in your domain.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;This excess of freedom however does create a large amount of setup work to get your server running, especially when it comes to getting rails going. Following &amp;lt;a href=&amp;quot;http://hackd.thrivesmarthq.com/how-to-setup-a-linux-server-for-ruby-on-rails-with-github-and-phusion-passenger&amp;quot; title=&amp;quot;How-To Setup a Linux Server for Ruby on Rails - with Phusion Passenger and GitHub - Hack&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;this tutorial&amp;lt;/a&amp;gt; on setting up Passenger and Capistrano, it took around 30 minutes and a couple of headaches.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;One downside with Rackspace is that it is down to the administrator of the account to ensure the server is secure. For an experience sysadmin this is probably a non-issue, but for those competent enough to get a server running but lacking any solid security experience, it can be a tad dangerous.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;To sum up, if you&amp;#39;re looking for complete control, extremely reasonable pricing, on demand support, and don&amp;#39;t mind getting your hands dirty in the command line, then you will probably love Rackspace.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;lt;hr /&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneofthesedaysblog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heroku&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logo_big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneofthesedaysblog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heroku&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logo_big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heroku&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logo_big&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; width=&amp;quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;313&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; height=&amp;quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; class=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alignright&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;382&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;Heroku is the opposite of Rackspace, swapping complete control for effortless setup and deployment. You can have your app deployed and running on their servers with 2 lines:&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre class=&amp;#39;brush:bash&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  heroku create MyAwesomeRailsApp&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  git push heroku &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;If you then navigate to the URL it gives you, you will see your rails app. The only caveat to this is that you must be in the root directory of your app, and it must be in a git repository. If you&amp;#39;re starting a brand new rails app, the setup would look like this:&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre class=&amp;#39;brush:bash&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  rails Skynet&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  cd Skynet&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  git init&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  git add .&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  git commit -m &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Importing&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Skynet&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  heroku create skynet&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  git push heroku &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;This will then have your new rails app running at http://skynet.heroku.com. &lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Heroku also comes with a swathe of plugins. From hosted MongoDB installations, to effortless DNS, to Cron jobs and auto backups, it&amp;#39;s like a Sith lord having the keys to the Padawan training room, and all the Jedis are away on holiday.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Essentially, Heroku has done to hosting what rails did for web development. Convention over configuration, excellent user experience, and having everything &amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; with the minimum amount of effort.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Another neat thing with Heroku is that all of the commands and tools it provides are accessible through a command line tool. You can add domain names, add more concurrency to your app, run rake commands, and just about every other feature they provide.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;So if you&amp;#39;re looking for a no fuss, beautifully designed, effortless workflow, rubyesque, affordable and scalable solution, you might want to check out Heroku. (However, it&amp;#39;s built on Rails, which &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canrailsscale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Can&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Scale&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actually&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;, so you may want to take that into consideration.)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 12 Unit Testing</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-12-unit-testing"/>
   <updated>2010-07-10T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-12-unit-testing</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apologise&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inconsistent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Amidst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commitments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writing&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proving&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;challenge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;able&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;How Not to Write a Blog Post Series&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Here&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s a tip now: start writing at least a week before you start publishing)&amp;lt;/em&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;We have a reasonable HTTP server working for us now. It can handle multiple simultaneous requests, log important information out to a file, and handle query parameters in the requested URL. While we can see that it works by running it, it would be good to have a more thorough test which we can run often and easily to ensure that any future changes do not break it. We will be using the &amp;lt;a href=&amp;quot;http://ruby-doc.org/core/classes/Test/Unit.html&amp;quot; title=&amp;quot;Module: Test::Unit&amp;quot;&amp;gt;Ruby Unit Testing Framework&amp;lt;/a&amp;gt; to achieve this.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Writing unit tests is a bit like using source control. Once you&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regularly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sanity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slightly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;higher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weren&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t using it. Similarly, once you&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;written&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;good&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;they&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;good&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;series&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manipulation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UNIX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checking&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Windows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apparent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;very&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;little&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronised&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crucial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threaded&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specifically&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SyncBufferTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;We are simply extending from the &amp;#39;Test::Unit::TestCase&amp;#39; class and then defining our test in the method &amp;#39;test1&amp;#39;. There is a convention that must be followed for defining new tests, but it is a simple one: each method must begin with &amp;#39;test&amp;#39;. You can have whatever you like afterwards, but with &amp;#39;test&amp;#39; at the front Ruby will know this is to be treated as a test case. The following are all valid test case names:&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_my_test&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_if_exception_thrown&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test123ABC&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;In order to examine more of the Ruby Unit Test API, we will need to make a quick addition to the SynchronisedBuffer class. Add the following  line to the beginning of the initialize method. (i.e. before @capacity = capacity)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;raise &amp;quot;Capacity must be greater than 0&amp;quot; unless capacity &amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exactly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;says&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raises&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Capacity must be greater than 0&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stops&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sense&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actually&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_zero_capacity&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;SynchronisedBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Capacity must be greater than 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_negative_capacity&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;SynchronisedBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Capacity must be greater than 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;#39;test_zero_capacity&amp;#39; and &amp;#39;test_negative_capacity&amp;#39; are testing this line we just added in above. An exception should be thrown when the supplied capacity is less than or equal to 0. By using the error handling begin/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thrown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calling&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;assert_equal&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provided&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convention&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seeing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Capacity must be greater than 0&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contained&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thrown&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;$!&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recently&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thrown&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;below&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;attachment_354&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;aligncenter&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;616&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Need more dots&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/07/Screen-shot-2010-07-09-at-11.24.10-PM.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.oneofthesedaysblog.com/wp-content/uploads/2010/07/Screen-shot-2010-07-09-at-11.24.10-PM.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Test Cases Passings&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Test Cases Passing&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;616&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;115&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;size-full wp-image-354&amp;quot;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;represents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;well&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2 tests, 2 assertions, 0 failures, 0 errors&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asserted&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neither&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;SynchronisedBuffer.new(0)&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appear&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instead&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thrown&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;being&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rescued&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Alternatively&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SynchronisedBuffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;would&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;F&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;place&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;being&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thrown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idea&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actually&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implemented&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;known&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Driven&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trick&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;don&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t overlap, but don&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;miss&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anything&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tested&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neither&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s own and so we must include this test. -1, however, is a negative number just like -2 or -9,235,123. It is in a class with an infinite amount of other negative numbers. It would be impossible, and senseless, to test each negative number as we know that the condition only requires the number to be greater than 0. -1 is therefore sufficient to ensure that it will work with any negative number.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Let&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_empty?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SynchronisedBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_full&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SynchronisedBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;item 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;Here we are creating a new buffer with a valid capacity and then calling the &amp;#39;assert&amp;#39; method. This simply checks if the value inside returns true. If it does, then the assertion is true. Without putting in any objects, empty? should return true. With a buffer of capacity 1, after putting in 1 item full? should return true.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;def test_not_full&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer = SynchronisedBuffer.new(2)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer.put(&amp;quot;item 1&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    assert(!buffer.full?)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;def test_not_empty&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer = SynchronisedBuffer.new(2)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer.put(&amp;quot;item 1&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    assert(!buffer.empty?)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;These&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldn&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t, and likewise with empty?.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;We now have some simple test cases in place, but they only ensure a limited part of the functionality. What we really want to test are the put and get methods. As these methods can potentially put to sleep the thread that calls them, we have to be careful when testing them. The scenarios we must test for are&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;lt;li&amp;gt;calling put while the buffer is empty&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;lt;li&amp;gt;calling put while the buffer is full&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;lt;li&amp;gt;calling get while the buffer is empty&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;lt;li&amp;gt;calling get while the buffer is full&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;lt;li&amp;gt;calling get while a thread is waiting on put&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  &amp;lt;li&amp;gt;calling put while a thread is waiting on get&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;and we can translate them to the following test case names&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;def test_put_while_empty&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;def test_put_while_full&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;def test_get_while_empty&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end  &lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;def test_get_while_full&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;def test_get_waking_up_sleeping_thread&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;def test_get_waking_up_sleeping_thread&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Our first test is rather simple&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;def test_put_while_empty&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    buffer = SynchronisedBuffer.new(1)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    buffer.put(&amp;quot;item 1&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    assert_equal(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, Thread.current.status)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;We create a new buffer with a capacity of 1. After putting in 1 item, the buffer should be full. The buffer was empty when we called put, so the current thread should not be put to sleep while waiting for the buffer to empty. Thus we are asserting that the status of the current thread is equal to &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;. This concept of checking thread status will be very important for the rest of the test cases.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;def test_put_while_full&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    buffer = SynchronisedBuffer.new(1)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    buffer.put(&amp;quot;item 1&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    thread = Thread.new(buffer) { |buffer|&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        buffer.put(&amp;quot;item 2&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    Thread.pass  # run &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; to ensure it sleeps&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    assert_equal(&amp;#39;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, thread.status, &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asleep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    thread.kill!&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;As before, we are creating a new buffer and placing in an item so it becomes full. As the buffer is full, any subsequent calls of put will cause the calling thread to sleep. As we don&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calling&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;put&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;is important as it without it, assert_equal might be called before the new thread has had a chance to actually call &amp;#39;put&amp;#39;. If this were the case, the thread would not yet be asleep, and so it&amp;#39;s status would be &amp;#39;run&amp;#39;, and the test would fail. &amp;#39;Thread.pass&amp;#39; says to the Ruby thread scheduler &amp;quot;I&amp;#39;ve had enough, let another thread run for a while&amp;quot;. This would give the thread to actually call buffer.put and then we can test if it&amp;#39;s state is set to &amp;#39;sleep&amp;#39;. Lastly, while perhaps not necessary, we are destroying this new thread.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;Having written this test case, the subsequent ones will follow much the same pattern.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;def test_get_while_empty&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer = SynchronisedBuffer.new(1)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    thread = Thread.new(buffer) { |buffer|&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        buffer.get&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    Thread.pass # run &amp;#39;thread&amp;#39; to ensure it sleeps&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    assert_equal(&amp;#39;sleep&amp;#39;, thread.status, &amp;#39;Thread should be asleep waiting to get&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    thread.kill!&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_get_while_full&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SynchronisedBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;item 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;def test_get_waking_up_sleeping_thread&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer = SynchronisedBuffer.new(1)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer.put(&amp;quot;item 1&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    thread = Thread.new(buffer) { |buffer|&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        buffer.put(&amp;quot;item 2&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    Thread.pass&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    buffer.get&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    thread.join&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    assert(!thread.alive?)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;thread.join&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trying&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someone&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calls&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Once&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actually&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calling&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;buffer.put&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Join&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;behave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronously&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pausing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joined&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;know&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;died&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;For&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;died&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happened&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;woken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thus&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assertion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calling&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;get&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;successfully&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;woke&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applies&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_get_waking_up_sleeping_thread&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SynchronisedBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;item 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;The results of all our test cases running should look something like the following:&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;[caption id=&amp;quot;attachment_357&amp;quot; align=&amp;quot;aligncenter&amp;quot; width=&amp;quot;611&amp;quot; caption=&amp;quot;You will learn to love this green&amp;quot;]&amp;lt;a href=&amp;quot;http:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneofthesedaysblog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneofthesedaysblog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uploads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; alt=&amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Many&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Many&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; width=&amp;quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;611&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; height=&amp;quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; class=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;357&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;[/caption]&lt;/span&gt;


&lt;span class=&quot;s2&quot;&gt;With all these test cases in place, we can be fairly certain that our implementation is correct and the any future bugs that may be introduced will be caught. Note that each test case only makes 1 assertion. While this is not entirely necessary, it is good practice. If a test case fails to pass, then there is no doubt as to which assertion failed. By placing 10 assertions into a test case &amp;#39;test_buffer&amp;#39; it  becomes much more difficult to find the exact cause of the failure as the name &amp;#39;test_buffer&amp;#39; failing tells us nothing and what was tested. If multiple assertions are made in the same test case, either one or more of them is redundant, or the test cases should be separated into multiple separate cases. &lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Hopefully these examples give you an understanding of how to use the Ruby Unit Testing Framework, as well as how to test synchronised and multi-threaded classes. As always, please leave a comment or send me an email with any feedback, criticisms, questions or comments.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 11 Zlib And Gzip</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-11-zlib-and-gzip"/>
   <updated>2010-07-05T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-11-zlib-and-gzip</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;internet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradually&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;working&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;way&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;homes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s not absolutely everywhere, and when it is, your ISP may be limiting speeds during certain times of the day or for certain types of internet traffic. To make things easier on users, we can have our web servers compress the data they send. Instead of sending a 200kb Javascript file, it can first be compressed on the server to ~50kb, sent via TCP, and then uncompressed by the web browser. The amount of data being sent is 1/4 of the size, and so the total time is reduced significantly (time taken to compress and uncompress is considered negligible). &lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Unfortunately, my attempts to wrangle &amp;lt;a href=&amp;quot;http://ruby-doc.org/core/classes/Zlib.html&amp;quot; title=&amp;quot;Module: Zlib&amp;quot;&amp;gt;Ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compression&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt; have not been successful. The documentation is patchy, at best, with comments such as &amp;quot;???&amp;quot;, &amp;quot;TODO: better comments&amp;quot;, and the occasional snippet of Japanese. Given today&amp;#39;s time constraints, I&amp;#39;m shipping an example that I feel should work, but does not. I will work on resolving the issue, and update this post when it works.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;socket.puts &amp;quot;HTTP/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;socket.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;socket.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;File.open(file, &amp;#39;r&amp;#39;) { |f|  &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    gz = Zlib::GzipWriter.new(socket, Zlib::BEST_COMPRESSION, Zlib::FINISH)  &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    while (line = f.gets) &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;        gz &amp;lt; &amp;lt; line&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    gz.close&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;I have modified the header to say we are sending the browser compressed data, and created a new Gzip writer object inside the response loop which spits out the contents of the requested file into the gzip writer, which has been given the socket. The documentation states that Gzipwriter can take an IO object, which socket happens to be, however when it runs an exception is thrown saying that the IO file has been closed. While possibly something simple, the answer has thus far eluded me. &lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;If you have any suggestions or solutions, leave a comment or send a tweet/email. Stay tuned for updates.&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 10 Uri</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-10-uri"/>
   <updated>2010-07-04T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-10-uri</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;Today&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brief&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s &amp;lt;a href=&amp;quot;http://ruby-doc.org/core/classes/URI.html&amp;quot; title=&amp;quot;Module: URI&amp;quot;&amp;gt;Uniform Resource Identifier (URI) class&amp;lt;/a&amp;gt; in order to handle a wider range of requests in our web server. Currently, if we enter a URL such as &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; into our web browser we will receive a request that looks like &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /index.html HTTP/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;. If we want to send any extra parameters such as an id (http://localhost:8080/test.html?id=123) then our server will naively assume that the file we are requesting is named &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html?&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, and so it will not be able to find it.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;By treating the request as an &amp;lt;a href=&amp;quot;http://www.bernzilla.com/item.php?id=100&amp;quot;&amp;gt;HTTP URI&amp;lt;/a&amp;gt;, we can interpret the request more intelligently, separating it into the filename and the query parameters. &lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;We can modify our worker class like so&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;file = request.split(&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;)[1]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;file = &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; + file&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;uri =  URI.split(file)&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;file = uri[5]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;query = uri[7]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;The &amp;#39;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; method will take a URL and split it up into 9 components which will be explained by using the URL &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html?user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; as an example&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Scheme - http&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Userinfo - nil&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Host - www.google.com&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Port - 80&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Registry - nil&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Path - /index.html&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Opaque - nil&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Query = user=123&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Fragment - nil&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;(Userinfo, registry, opaque and fragment are not likely to be used for an HTTP request so we can ignore them.)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;The two components we are interested in are path and query, elements 5 and 7 respectively. By passing the middle part of our GET request to the split method, we can grab the 2 elements we need. &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; contains the file we want, so that will be passed to the File class. &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dealt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;later&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 9 Logging</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-9-logging"/>
   <updated>2010-07-02T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-9-logging</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>Ruby Day 8 Multi Threading Synchronisation And Buffers</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-8-multi-threading-synchronisation-and-buffers"/>
   <updated>2010-07-02T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-8-multi-threading-synchronisation-and-buffers</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ve seen the &amp;lt;a href=&amp;quot;http://www.oneofthesedaysblog.com/ruby-day-7-http-protocol/ &amp;quot;&amp;gt;HTTP protocol in action&amp;lt;/a&amp;gt;, we can move on to a more advanced version. We will turning the server into a multi-threaded one, allowing it to handle multiple requests simultaneously. Previously, once we had accepted a socket we had to finish processing it until we could accept another one. This meant that if another person tried to connect while it was processing an earlier request, it would have to wait. By sending each request to a separate thread, more than one can be processed at a time resulting in a more responsive server for everyone. &lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;The approach we will take to implement this is to use so-called &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Circular_buffer&amp;quot;&amp;gt;circular buffer&amp;lt;/a&amp;gt;. It is essentially a ring with a start and an end. Items go into the end, and come out the front. As we add items, we move the back along to an empty slot. When we take items out, we also move the front along to an empty slot. When the front is the same as the back, we know the buffer is either completely full or completely empty. Lastly, the buffer will have a fixed capacity so that when the front is moved to a position greater than the capacity, it wraps back around and starts from 0.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;When we accept a connection the returned socket will be placed into the buffer. A group of threads will continually be checking the buffer for new sockets, and when one is found a thread will take it and process it. This process is useful because it allows us to completely separate our request handling and response generation. We will call these threads &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; threads, and the collection of them will be called a thread pool. Thus, a new request will be placed into the buffer and processed by a worker from the thread pool.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;There is a slight caveat to working with threads that use any form of shared data structure (each thread has access to the same circular buffer). A thread can be interrupted at any time by the scheduler and so a number of problems could ensue. For example, let&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;put&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stores&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stored&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interrupted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consistent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;were&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;added&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;put&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;still&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;though&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;added&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;What&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s worse is that these problems are wholly unpredictable, so we must find a way to ensure these problems can&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;way&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guaranteeing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;put&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 

&lt;span class=&quot;no&quot;&gt;Ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Monitor&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;achieve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;synchronised&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronised&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;released&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Let&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s go over the logic we will need to implement for our buffer.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;We need to put items in, and get items out. &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;The buffer will have a fixed size, and when it is full we should not be able to put anything more in. &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;When it is empty, we should not be able to get anything out. &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;If we want to get something while it is empty, it should pause until something has been put in, and then return it. &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;If we want to put in something while it is full, it should pause until something has been removed.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Let&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;monitor&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SynchronisedBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Monitor&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;vi&quot;&gt;@empty_cond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cond&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@full_cond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cond&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
           &lt;span class=&quot;vi&quot;&gt;@empty_cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
           &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
           &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
           &lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@capacity&lt;/span&gt;
           &lt;span class=&quot;vi&quot;&gt;@full_cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; 
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;               
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             
       &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
           &lt;span class=&quot;vi&quot;&gt;@full_cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
           &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
           &lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@capacity&lt;/span&gt;           
           &lt;span class=&quot;vi&quot;&gt;@empty_cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;    
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;        
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;full?&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;We are extending the Monitor class, which gives us access to &amp;#39;synchronize&amp;#39; and the wait/si&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnal&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialised&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;def initialize(capacity)&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   @capacity = capacity&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   @front = 0&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   @back = 0&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   @elements = Array.new(capacity)  &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   @empty_cond = new_cond&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   @full_cond = new_cond&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;   super()&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creating&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hold&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;come&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;our&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Monitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;new_cond&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ConditionVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;important&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;construct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ensures&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;satisfied&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;t be removed when the buffer is empty (empty_cond) and a condition that we can&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full_cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@empty_cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@capacity&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@full_cond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; 
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;               
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;To have a section of code that is synchronised, we call the &amp;#39;synchronize&amp;#39; method and have the code inside a do-end block. Once inside, we call the &amp;#39;wait_while&amp;#39; method on the empty condition. We are passing in the method &amp;#39;empty?&amp;#39; as our condition, and so the line can be read as &amp;#39;have any thread that calls this method wait as long as the buffer is empty&amp;#39;. Alternatively, we could write &amp;#39;wait_unless { !empty? }&amp;#39; which would read &amp;#39;let any thread call this method unless the buffer is empty, in which case, make them wait&amp;#39;.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;When the buffer is empty, any thread that calls get will be put to sleep. If the buffer isn&amp;#39;t empty, then the element at the front is removed, and the front position is moved along by 1. The line &amp;#39;@full_cond.signal&amp;#39; will wake up a thread that was put to sleep waiting for the full buffer to have some space. We have just removed an item, therefore there is now space to put in a new item, so we can wake up, or &amp;#39;signal&amp;#39; a sleeping thread. &lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;def put(element)             &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    synchronize do&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        @full_cond.wait_while {full?} &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        @elements[@back] = element&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        @back = (@back + 1) % @capacity           &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        @empty_cond.signal    &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;     end        &lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;#39;put&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opposite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Threads&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;back&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Once&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;@empty_cond.signal&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiting&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;woken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;woken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;come&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;served&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;full?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@back&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;If the front is the same position as the back we know that the buffer is either empty or full. We know it will be empty if the element at this position is nil, and full if the element at this position is not nil. These methods must also be synchronised as otherwise they could be interrupted in-between the two conditions, and a corrupted buffer state could result.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;Sincere thanks must go to Robert Klemme from the &amp;lt;a href=&amp;quot;http:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;Ruby Forum&amp;lt;/a&amp;gt; who helped me work out the bugs in this implementation, as well as Craig Taverner from &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snippets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amanzi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2007&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;his blog&amp;lt;/a&amp;gt; for introducing the monitor class.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;So now we have a synchronised buffer which we can fill with incoming requests. What we need next is a thread pool full of workers who are ready to process the contents of the buffer. The class below should look fairly familiar to what was in the &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oneofthesedaysblog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;basic web server&amp;lt;/a&amp;gt;, with just a few additions.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;require &amp;#39;thread&amp;#39;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;class Worker &amp;lt; Thread&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;    def initialize(buffer)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;        super(buffer) { |buffer|&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;            begin&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                loop do&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    socket = buffer.get&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;                    request = socket.readline&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;                    validGET = request.match(/GET .* HTTP\/1\.1/)&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;                    unless (validGET) &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        socket.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bad&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        socket.close&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        next&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    end&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;                    file = request.split(&amp;#39; &amp;#39;)[1]&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    file = &amp;#39;.&amp;#39; + file&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;                    unless ( File.exists?(file) ) &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        socket.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Found&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        socket.close&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        next&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    end&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;                    socket.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    socket.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    socket.puts &amp;quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    File.open(file, &amp;#39;r&amp;#39;) { |f| &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        while (line = f.gets) &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                            socket.puts line&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                        end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    }&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;                    socket.close&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;            rescue Exception =&amp;gt; e&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                $stderr.puts $!.inspect&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;            end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;        }          &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    end    &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;The main difference is at the top, and the bottom&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;class Worker &amp;lt; Thread&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;    def initialize(buffer)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;        super(buffer) { |buffer|&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;            begin&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                loop do&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;                    socket = buffer.get&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;          ...&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;        end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      rescue Exception =&amp;gt; e&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   				$stderr.puts $!.inspect&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;      end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    }          &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  end    &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Extending the Thread class means we can treat Worker objects exactly as if they were threads. To do this however, we also need to implemenet the initialize method. When creating a regular thread, the instructions to execute are passed to it as a block&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;Thread.new { # do something }&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Therefore, all we need to do is call &amp;#39;super&amp;#39;, as this will call the initialize method on the parent class, Thread. Placing the block after this will mean that it is executed by the Thread class. We want to pass in the buffer for it to use, so this is passed in as an argument and then into the block.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;As each thread will be running outside of the main execution thread, we will not be informed of any errors that occur which can make bug finding difficult. If we wrap the code to be executed in Ruby&amp;#39;s equivalent of a try/catch block then we can grab any exceptions thrown and send them to standard error. &amp;#39;$stderr.puts $!.inspect&amp;#39; is a neat shortcut that uses the $! global variable. This contains the most recently thrown exception, and so we are calling inspect on this and sending it to stderr.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Lastly, instead of executing the processing code once, we are looping infinitely. We can to continually check the buffer for new sockets with &amp;#39;buffer.get&amp;#39;. When the buffer is empty, &amp;#39;buffer.get&amp;#39; will put the worker to sleep, and it will be woken up eventually when a new socket is placed into the buffer.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;Last but not least, we need to create a number of workers, and set up our buffer.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;server = TCPServer.new(&amp;#39;127.0.0.1&amp;#39;, &amp;#39;8080&amp;#39;)&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;buffer = SynchronisedBuffer.new(100)&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;workers = []&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;for i in (1..40)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   workers[i] = Worker.new(buffer)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;   workers[i][:name] = &amp;#39;worker&amp;#39; + i.to_s  &lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;while socket = server.accept&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    buffer.put(socket)&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;We are creating our buffer with a capacity of 100. This means that we can have 100 requests queued up until we have to start waiting for the buffer to be emptied. We are also creating 40 workers, and naming them so we can tell them apart. Lastly, we have our familiar &amp;#39;while socket = server.accept&amp;#39; loop but instead of doing any processing, we simply put it into the buffer.&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;All things going well, your web server should now be capable of handling many simultaneous requests. Leave a comment, email me, send me a tweet or a message on Facebook with any questions, criticisms or comments.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 7 Http Protocol</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-7-http-protocol"/>
   <updated>2010-06-29T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-7-http-protocol</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;received&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;via&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TELNET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limited&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.w3.org/Protocols/&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP - Hypertext Transfer Protocol Overview&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HyperText&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Transfer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Protocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt; to enable us to show a web page. Being a standard, and universally adopted protocol, a web browser knows that if it uses HTTP to talk to a web server, they will both understand each other. HTTP defines a set of actions that a web server must carry out. These are:&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;OPTIONS&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Returns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;OPTIONS *&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entire&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whereas&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;OPTIONS filename&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;particular&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;GET&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Returns&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GET index.html&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;HEAD&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Works&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Instead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;such&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;POST&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sending&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;along&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;associate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;POST index.php?foo=bar&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;index.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;under&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo.&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;PUT&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opposite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;DELETE&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;DELTE filename&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;however&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guarantee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actually&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;TRACE&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exact&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reach&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;CONNECT&amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONNECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implementations&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wish&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;communication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Paraphrased&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP/1.1: Method Definitions&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;W3C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;)&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;For a basic web server we will only need to implement the GET method, as that will at least allow us to send content to the browser. We&amp;#39;ll also want to send back a few status codes. Status codes let the browser determine what the server has done. The most prevalent example is 404 - File Not Found. Equally as important is 200 - OK, which is returned when the server can successfully carry out the request. Along with these 2, we will send back 400 - Bad Request if something other than a GET request is sent. The entire server code is below, and each step is explained in detail afterwards.&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;pre class=&amp;#39;brush:ruby&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;require &amp;#39;socket&amp;#39;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;server = TCPServer.new(&amp;#39;127.0.0.1&amp;#39;, &amp;#39;8080&amp;#39;)&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;while socket = server.accept&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;    request = socket.readline&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;    validGET = request.match(/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validGET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP/1.1 400 Bad Request&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP/1.1 404 File Not Found&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP/1.1 200 OK&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Connection: close&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;To test the server, create an html file called test.html in the same directory as the Ruby file containing the above code. Run the program, and point your browser to &amp;#39;http:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;. Hopefully you should see the contents of the html file rendered by the browser.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;The first 3 lines should look familiar.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;server = TCPServer.new(&amp;#39;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;while socket = server.accept&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    request = socket.readline&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;We&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;once&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;made&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;re storing the received information in the &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; variable.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;After this we&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checking&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;validGET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/GET .* HTTP\/1\.1/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;We are using the regular expression &amp;#39;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; to check if the request fits the format &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;. &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; represents any sequence of characters, of any length. While this isn&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perfect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suffice&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brush:ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validGET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HTTP/1.1 400 Bad Request&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;#39;unless&amp;#39; functions identically to &amp;#39;if not&amp;#39;, so the code inside will only be executed if validGET is not equal to something other than nil. validGET will be nil if the request string did not match the regular expression. Hence, if the request doesn&amp;#39;t match we are sending back &amp;#39;HTTP/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bad&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, and closing the socket. &amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; stops Ruby from executing the remaining contents of the loop, and forces it to start the loop again.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;file = request.split(&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;)[1]&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;file = &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; + file&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Here we are simply finding the name of the file they requested the server to load. The GET request consists of 3 parts, with a space in between each: &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;. Thus, the second element in the array returned by split will be the filename. We prepend the filename with a &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; to ensure that the resulting file path is relative to the current directory. If they request index.html, the request will come through as /index.html. By prepending &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; the file becomes ./index.html which is relative to the current directory.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;unless ( File.exists?(file) ) &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    socket.puts &amp;quot;HTTP/1.1 404 File Not Found&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    socket.close&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    next&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;Just as we checked for a correct GET request, we need to check if the requested file can actually be sent. File.exists? will return true if the given file exists on the computer. If not, we send back the famous 404 error.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;socket.puts &amp;quot;HTTP/1.1 200 OK\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;socket.puts &amp;quot;Connection: close\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;socket.puts &amp;quot;Content-Type: text/html\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Having got to this point in the code, we can say that we have received a correctly formed request for a file that we are able to send back. What we do next is part of the HTTP protocol, and is us telling the client that the request can indeed be processed. This is the 200 OK response. Following this, we send a &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; to indicate that we have finished sending back this message. &amp;#39;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; is the beginning of a new message, and it is telling the client that they can expect to receive an html file. If we want our web server to handle images, and other file types, we will have to add in logic to send back the correct content type. Today we will just stick with text/html.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;lt;pre class=&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;File.open(file, &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;) { |f| &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    while (line = f.gets) &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;        socket.puts line&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    end&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;Finally, we can send the contents of the html to the client. We simply open up the requested file and loop over each line in it. For each line, we send it back through the socket.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;There you have it. A web server that handles HTTP 1.1 GET requests to successfully send back an HTML file, while also handling malformed requests, and requests for non-existent files. Granted, there is a large amount of functionality that we didn&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;including&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;important&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hopefully&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highlights&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mechanisms&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 6 Sockets And Tcp</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-6-sockets-and-tcp"/>
   <updated>2010-06-28T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-6-sockets-and-tcp</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;To kick off this web-server series we&amp;rsquo;ll create a server which, at it&amp;rsquo;s simplest, consists of just 3 lines of Ruby code. It can be called an echo server, and it does just that; it sends back to you whatever you send to it. Find a large, empty room, yell out &amp;ldquo;Ruby is awesome&amp;rdquo; and you&amp;rsquo;ll hear it repeated (this also works in a small room filled with Ruby developers). If you&amp;rsquo;re not fond of going outside (or socialising) however, you can use an echo server to achieve the same effect. Send the text &amp;ldquo;Ruby is awesome&amp;rdquo; to this echo server, and it will reply with the same message.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;This simple example expresses a concept that is fundamental to how any server works. They listen for requests, do something, and (sometimes) send something back. A web server is listening to requests to load a particular page, and in response, it sends back the contents of that page. A mail server listens for requests to download mail messages, and in response it sends the latest emails. As most servers follow this basic pattern, standards have been developed and adopted that describe in what format the requests and responses should be. Warning: You are now entering the world of acronyms.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;TCP, UDP, HTTP, STMP, NTS, FTP, ARP, SSH, IMAP, DNS, DHCP, IRC, to name but a few, are all protocols that describe requests and responses. Today we will be using the Transmission Control Protocol (TCP) to implement our simple echo server. To describe TCP, we can look at it&amp;rsquo;s simpler cousin: the Universal Datagram Packet (UDP). UDP is a protocol that specifies how data should be broken up into chunks, in order to send over a network. It also specifies how that data knows where it has to go. By pairing up a packet with an Internet Protocol (IP) address, network hardware will (all things going well) be able to send a packet it receives to the correct destination. The packet also contains the IP address of the sending machine, so that the receiver knows where to send its response. TCP does exactly what UDP does, except it does a few extra things to ensure that packets sent do actually arrive correctly. This includes error checking and correction, as well as ensuring that the sender isn&amp;rsquo;t sending more packets that the receiver can handle at once.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If we want to create an &amp;lsquo;echo&amp;rsquo; server, we will need to listen for packets that are sent to us via the TCP protocol. When we receive one, we need to extract the message, and send it back again. Here&amp;rsquo;s the server:&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;socket&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;8080&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Firstly, we&amp;rsquo;re creating a new TCPServer object that will listen for requests at the IP address 127.0.0.1 and on port 8080. 127.0.0.1 is an IP address reserved to represent the local machine. If the operating system is asked to send a packet to this address, it realises that this is actually the same machine and so it is a good way of testing without requiring 2 computers. Port 8080 is a common port used for alternative web servers, which we will be creating eventually, so we may as well use it now. As the network card receives packets for the entire operating system, and not specific programs (mail client, chat client, etc.), a program must associate itself with a port number. The operating system can then look at the port number in the received packet and determine which program it should go to. Packets with port number 21 will be sent to your FTP client, port 110 packets will go to your mail client. We want packets with port 8080 to be sent to our Ruby program. To ensure there is no confusion, only one program can take one port number at a time, so if you receive an error about port 8080 being use, you may have another program already attached to it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;When you run this program, nothing will happen. The program will continue running forever and nothing will be displayed to the screen. Why doesn&amp;rsquo;t the program end? The answer is in the second line, server.accept. Accept is a method which causes the program to pause until the TCPServer object receives a packet. As soon as it does, it returns a Socket object which contains the received packet and information on the machine who sent it. This socket acts as our end of the connection created between us and them, &lt;a href='http://www.youtube.com/watch?v=f99PcP0aFNE'&gt;a tube of the internet&lt;/a&gt;, if you will allow the analogy. Whatever is sent down this tube, we will eventually receive, and vice versa. Therefore, to create our echo, we come to the third line.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We read the socket, which will contain the message they sent, and we use &amp;lsquo;puts&amp;rsquo; to sent it straight back. To see this in action, we can use telnet to connect to our running server and send it a message.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;telnet&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-8'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-8&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The screencast below will show it working.&lt;/p&gt;

&lt;object width=&quot;600&quot; height=&quot;450&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=12910541&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=12910541&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;600&quot; height=&quot;450&quot;&gt;&lt;/embed&gt;&lt;/object&gt;


&lt;p&gt;&lt;a href=&quot;http://vimeo.com/12910541&quot;&gt;A Simple TCP Echo Server in Ruby&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/user4148440&quot;&gt;Sam Dalton&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-9'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-9&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Voila! Hopefully you managed to get it working, and understood why it works as well. While this is a server in just 3 lines, it&amp;rsquo;s not particularly useful. Once someone connects, the programs ends and the server closes. To make it run indefinitely we will need some kind of infinite loop.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-10'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-10&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;In Ruby, every operation returns something, even variable assignment. The returned value will be equal to whatever value was set. So in this case, when server.accept detects a connection and returns a socket object, the while loop will see that an object was returned. An object is not regarded as false, and so the loops is entered. When the loop ends, server.accept is called once more, and the process repeats indefinitely. The program will never end because server.accept will always wait until it gets a connection, and hence will always return a non-nil value to the while loop condition. Just as with files, we also have to close the socket. We didn&amp;rsquo;t do this in the first example because the program exited straight afterwards so there wasn&amp;rsquo;t much need.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;So there you have it, a 3 (or 4) line echo server that uses the TCP protocol.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 5 Building A Web Server</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-5-building-a-web-server"/>
   <updated>2010-06-27T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-5-building-a-web-server</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Looking through the upcoming topics that I plan to cover, I noticed a connection: they all cover important aspects of a web server. Threads let us handle multiple requests simultaneously, queues let us store pending requests and a mutex ensures that it won&amp;rsquo;t become corrupted from multiple threads accessing it. We also need a way of logging requests, interpreting URLs, and certainly, we&amp;rsquo;d like to test it to be sure it all works. So instead of covering the remaining topics in my proposed order, I will instead create sections of the web server that each focus on a different part of the Ruby API. Not only will this provide a more hands-on and relevant example, but it will also serve as a basic tutorial on how the HTTP protocol and web servers work. The resulting server will by no means be any competition to existing Ruby servers such as &lt;a href='http://github.com/fauna/mongrel'&gt;Mongrel&lt;/a&gt; or &lt;a href='http://code.macournoyer.com/thin/'&gt;Thin&lt;/a&gt;, but it will serve us well for the purposes of teaching.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;First up will be sockets, as with out that we have no hope of communicating with anyone.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 4 Forwardable</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-4-forwardable"/>
   <updated>2010-06-26T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-4-forwardable</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Today&amp;rsquo;s topic is a favourite of upper management: delegation. Delegation is when you make someone else do something for you, but you still get the credit for it. The &lt;a href='http://ruby-doc.org/core/classes/Forwardable.html'&gt;Forwardable&lt;/a&gt; class in Ruby does much the same thing. It lets an object call methods on another object, but appearing to the user like the first object is actually doing the work. To see the advantage of forwardable, we can look at an example where it&amp;rsquo;s not used. We will create two classes, one called MarsExplorer and a second called MissionControl. We want to be able to control the mars robot in a more suitable, oxygen filled environment, which would be Mission Control.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;MarsExplorer&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;
       &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backwards&lt;/span&gt;
       &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
       &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@speed&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Our robot can move forwards, backwards, and it can stop. After each action we ask it to print out the speed, so we can keep track of when the methods are called.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MissionControl&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MarsExplorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backwards&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backwards&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Phew, that was a lot of typing! Too much, in my opinion. For each method in MarsExplorer, we have had to write the same method definition in MissionControl. If we ever change our robot class to have a turn method, or we change &amp;lsquo;stop&amp;rsquo; to &amp;lsquo;brake&amp;rsquo;, then we will have quite a few changes to make in our MissionControl class. In addition, MissionControl is now very cluttered with method definitions that aren&amp;rsquo;t directly related to the class. It would be better if we could simply let MissionControl respond to the methods of MarsExplorer, in a simple and unobtrusive way. We can achieve this by using Forwardable, as you can see in our updated MissionControl.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;forwardable&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MissionControl&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forwardable&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def_delegators&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:backwards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stop&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;def_delegator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:brake&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MarsExplorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;      
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Notice that all of the method definitions are gone, with the exception of initialize, which hasn&amp;rsquo;t changed. Firstly, we have said that we want to make MissionControl extend Forwardable&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forwardable&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;This gives us access to the methods in Forwardable that follow, def_delegators and def_delegator. When we want to provide access to multiple methods, and we don&amp;rsquo;t mind calling them by the same name, we can use def_delegators. The syntax is explained below.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;def_delegators :theObject, :method1, :method2, :method3&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;def_delegators&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:backwards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stop&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We are saying that MissionControl should respond to the methods forward, backwards, and stop, and it should respond by calling the method of the same name on the robot object. Instead of 3 method definitions, we only need one line stating which object to delegate to, and what methods it should allow delegation of. If we want to change the apparent name of the method, we can use def_delegator.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-8'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-8&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;def_delegator :@theObject, :methodName, :desiredMethodName&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;def_delegator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:brake&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-9'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-9&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now we can call the method &amp;lsquo;brake&amp;rsquo; from MissionControl which will call the &amp;lsquo;stop&amp;rsquo; method on our MarsExplorer. Neat! Let&amp;rsquo;s take it for a spin.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MissionControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backwards&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# -1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brake&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 0&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-10'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-10&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now, not all of us are engineers at NASA, so where might you use Forwardable in a real life? It is useful anywhere you find yourself writing methods similar to the ones in the first MissionControl implementation, simple wrapping of another object&amp;rsquo;s methods. It can also be used as a form of adapter. By defining your own class that delegates to another object, and only calling the methods on this class, the delegate object can be set to anything. For example, if you are writing an application that will be using a database, but you&amp;rsquo;re not sure if it will be MySQL, MSSQL, or PostgreSQL, you can create a wrapper class that has def_delegator set for each method you want to be able to call. Your implementation will use this wrapper class for all database access, with the method calls being delegated to whichever object you have set. If the underlying database object has different method names, you only need to update your def_delegator definitions, and all of your implementation code will remain the same. Here&amp;rsquo;s a contrived example to demonstrate this.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyDatabase&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Forwardabble&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;def_delegator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:newMySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;	

&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Suppose that there exists a &amp;lsquo;MySQL&amp;rsquo; class, which provides the method &amp;lsquo;newMySQL&amp;rsquo; to create a new database. If we build our implementation on the MyDatabase class instead of the MySQL class, we will be able to switch to PostgreSQL in the future by simply changing the def_delegator&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;def_delegator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:newPostgreSQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-12'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-12&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Our implementation code remains untouched, and we have only made one small change. While this example is entirely fictional, it shows how you can create a level of abstraction with Forwardable.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 3 Files</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-3-files"/>
   <updated>2010-06-25T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-3-files</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The importance of &lt;a href='http://ruby-doc.org/core/classes/File.html'&gt;files&lt;/a&gt; goes without saying, so let&amp;rsquo;s get straight into it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Creating_a_File'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Creating_a_File&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;Creating a File&lt;/h2&gt;


&lt;p&gt;This command will first look for a file in the current directory called myFile, creating it if it can&amp;rsquo;t be found. The &amp;lsquo;w&amp;rsquo; tells ruby that we want to write to it. We can then write to the file by using the &amp;lsquo;write&amp;rsquo; method.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myFile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;my awesome story&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;When a file is opened the operating system records which program opened it. If we don&amp;rsquo;t tell the operating system that we have finished with the file, it will keep this information until the program exits. While this may not cause a problem in a simple example, it could lead to errors with a large number of files, or multiple programs accessing the same file. Calling &amp;lsquo;close&amp;rsquo; on the file will take care of this. Whenever you open a file, you must close it when you are finished.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;You can probably guess how to read from the file&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myFile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# my awesome story&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Identical to the first example, but instead of a &amp;lsquo;w&amp;rsquo; for writing to the file, we use an &amp;lsquo;r&amp;rsquo; for reading from the file. The letter &amp;lsquo;a&amp;rsquo; can be used if we want to open a file, and append content to the end of it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Reading_From_a_File'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Reading_From_a_File&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;Reading From a File&lt;/h2&gt;


&lt;p&gt;For those of you coming from a PHP background, this code below should look familiar&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myFile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;which simply opens a file and reads each line of it until it reaches the end. This is rather ugly, to be honest. We have to create a file pointer, check that we haven&amp;rsquo;t reached the end, read from it, and then close it. That&amp;rsquo;s 4 Steps, but we can do it in just 1 line in Ruby.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myFile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-8'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-8&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;By placing a block at the end, we can catch the opened file, and loop over each line in the file. When the block ends, Ruby will automatically close the file for us. The block method of file handling is preferred as you won&amp;rsquo;t run the risk of forgetting to close a file.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Peculiarities'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Peculiarities&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;Peculiarities&lt;/h3&gt;


&lt;p&gt;If you try writing a new line to a file with the typical \n character, you may find that it does not work.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;line 1 \n line 2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# line 1 \n line 2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-10'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-10&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The \n character is stored as a \ character followed by the letter n. Not quite what we wanted. So how can you create a new line in your file? If we use &amp;lsquo;puts&amp;rsquo; instead of &amp;lsquo;write&amp;rsquo;, then Ruby will automatically place a real newline character at the end, once for each time we call puts.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;line 1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;line 2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;line 1
line 2
The file clearly has &amp;lsquo;line 1&amp;rsquo; and &amp;lsquo;line 2&amp;rsquo; on separate lines so we have succeeded.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-File_Methods'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-File_Methods&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;File Methods&lt;/h2&gt;


&lt;p&gt;If you are familiar with UNIX, bash in particular, then you will feel right at home with the File class. It offers just about every bash file operation, calling them by the same names and accepting the same arguments. For example, you can use &amp;lsquo;chmod&amp;rsquo; and &amp;lsquo;chown&amp;rsquo; to change permissions, or set who owns the file. Copy, move, delete, rename, stat, and more, are all available. Have a look at this &lt;a href='http://www.doc.ic.ac.uk/~wjk/UnixIntro/Lecture2.html'&gt;UNIX tutorial&lt;/a&gt; if you want to learn about file operations.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-End'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-End&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;End&lt;/h2&gt;


&lt;p&gt;Hopefully you now have some familiarity with the way Ruby handles files.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-14'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-14&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;
&lt;em&gt;I clearly was not familiar enough with blocks at the time of writing this post, as David pointed out in the comments. I had an incorrect statement stating that a file handler passed into a block can only be used once. The post has been updated to reflect this.&lt;/em&gt;&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 2 Array Enumerable</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-2-array-enumerable"/>
   <updated>2010-06-24T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-2-array-enumerable</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Without the array, programming would be terribly difficult. To store 10 items, you would need 10 different variable names, and any more than this makes things hopelessly inefficient. The array lets us store a number of items under a single variable name. We can reference a specific item simply by saying which variable it&amp;rsquo;s stored in, and in what position it lies. Like in C and PHP, Ruby starts indexing at 0. myArray[0] will give you the first element. In C, if you tried to access myArray[-1] you would meet a nasty runtime error. In Ruby, however, a negative index is treated as an index relative to the end of the array. Thus -1 becomes the last element, -2 the second to last, and so on.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;a href='http://ruby-doc.org/core/classes/Array.html'&gt;Ruby&amp;rsquo;s Array class&lt;/a&gt; has a lot of methods, so let&amp;rsquo;s get right in to it and explore some of what it has to offer.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Creation'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Creation&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;Creation&lt;/h3&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1 2 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;That&amp;rsquo;s all it takes! The square brackets let Ruby know that we want to create a new array, with the elements set to be the contents of the brackets. This syntax is an alias of the actual method, [].&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1 2 3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If we want to create an array, but we don&amp;rsquo;t have anything to store in it yet, we can use the &amp;lsquo;new&amp;rsquo; method.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If we know that we want to store n items, we can create the array with a capacity.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 10&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Size is a method of array which returns the number of elements. We created an empty array with space for 10 elements, and that is the size of the array.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Generation'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Generation&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;Generation&lt;/h3&gt;


&lt;p&gt;The Array class gives us a powerful way of generating elements using a block.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 0 2 4 6 8&lt;/span&gt;
    &lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-9'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-9&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We have created an array called &amp;lsquo;even&amp;rsquo; that contains the first 5 even numbers. Firstly, we stated that we wanted a new array of size 5&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-10'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-10&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Secondly, we put a block at the end of it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;This could also be written as&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-12'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-12&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;What is this voodoo magic, do I hear you ask? Well, the block is taking a number, i, and returning the sum of i with itself. The value of i that is passed is the index into each element created. Thus for an array of size 5, we will have the indices 0, 1, 2, 3, and 4. Working this out the long way gives us&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;even&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-13'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-13&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Using a block lets us define each element programatically, based on the the index of that element. Nifty!&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Interesting_Methods'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Interesting_Methods&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;Interesting Methods&lt;/h3&gt;


&lt;p&gt;There are a lot of methods in the API, and most of them have some sample code to go with them. Therefore, I will look at some of the more interesting ones.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-*'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-*&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;*&lt;/h4&gt;


&lt;p&gt;While this method can be used to duplicate an array n times, like so&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;echo&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# echo echo echo&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-16'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-16&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;the more interesting usage is as a join operator. PHP offers the join() method which, given an array and a character will return a string consisting of each array element, followed by the given character. Ruby also has a join method, but the * operator is a great shortcut.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# c,s,v&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-abbrev'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-abbrev&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;abbrev&lt;/h4&gt;


&lt;p&gt;The API states that this method &amp;lsquo;calculates the set of unambiguous abbreviations for the strings in self&amp;rsquo;. The example given, while sensible, doesn&amp;rsquo;t relate to a particularly useful application.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;abbrev&amp;#39;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;%w{ car cone }&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbrev&lt;/span&gt;   
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ca&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;car&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;car&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;car&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;co&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;con&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cone&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;cone&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-18'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-18&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Note that this method isn&amp;rsquo;t part of the core API, and so it needs to be explicitly included&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-19'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-19&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;So why is this useful? The main application I can see for this is auto-completion. Given a set of names or commands, what are the fewest characters I can type to identify one in particular? Consider a lazy person using twitter. If I want to send a message someone, I don&amp;rsquo;t really want to type out their whole user id. Given an array of people I follow, abbrev can generate a list of possible abbreviations such that each abbreviation will only reference one person.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;tweeps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jeff&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;steve&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;frank&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;james&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stephen&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tweeps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abbrev&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;frank&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;frank&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;stephe&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stephen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;jam&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;james&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;jef&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;steve&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;steve&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;step&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stephen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;ja&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;james&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;fr&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;frank&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;je&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;jame&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;james&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;frank&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;stephen&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stephen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jeff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;fran&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;frank&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;stev&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;steve&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;james&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;james&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;steph&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stephen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&amp;quot;fra&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;frank&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-20'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-20&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Steve and Stephen have the same first 3 characters, and so you can see that the shortest abbreviation for each is stev and step. You may have noticed that I used &amp;lsquo;p&amp;rsquo; and not &amp;lsquo;puts&amp;rsquo;. This is because abbrev doesn&amp;rsquo;t return an array, but a hash of &amp;lsquo;abbreviation&amp;rsquo; =&gt; &amp;lsquo;originalString&amp;rsquo; pairs.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-collect'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-collect&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;collect&lt;/h4&gt;


&lt;p&gt;This method is similar to the element generation described above. Given an array, place a block at the end which takes each element of the array. In this case, instead of the index being passed in, the actual element is passed in. The resulting value can either be stored back in the array, or placed into a new array.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# [2, 4, 6, 8]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-22'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-22&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;By checking if each number is divisible by 2, we can create a new array containing only the even numbers. &amp;lsquo;compact&amp;rsquo; is used to remove elements that are &amp;lsquo;nil&amp;rsquo;. As collect will create a new array of the same size, when the number is odd no value will be returned and so that element will be empty. To overwrite the array instead of creating a new one, use the exclamation mark.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect!&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-uniq'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-uniq&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;uniq&lt;/h4&gt;


&lt;p&gt;By using uniq you can quickly make your array behave like a set.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# [1, 2, 3, 4]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Enumerable'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Enumerable&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;Enumerable&lt;/h2&gt;


&lt;p&gt;Now that we have a basic understanding of Array, let&amp;rsquo;s take a look at it&amp;rsquo;s cousin class: Enumerable. Enumerable is all about iterating. The collect method that we have just seen is an example of an Enumerable function. Collect lets you perform some operation on each element of an array. Sorting is another example of what you can do with Enumerable. The key difference between Array and Enumerable however, is that while you may create an array, you don&amp;rsquo;t create an enumerable. Rather, by defining certain methods, a class can behave like an enumerable object. Before we look at how to do that, let&amp;rsquo;s see some of the methods available.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-inject'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-inject&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;inject&lt;/h4&gt;


&lt;p&gt;The inject method is similar to collect, but an extra value is sent to the block at each iteration containing the result of the previous iteration. This lets us compute the factorial of a number in a neat way:&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# 10&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-sort'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-sort&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;sort&lt;/h4&gt;


&lt;p&gt;When we have an array of elements, we quite often want to sort them. It they are names, we&amp;rsquo;d like to sort them alphabetically; if they are numbers, well, numerically would make sense. The sort method gives us great flexibility when it comes to sorting by letting us define the sorting comparator as a block.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w{a c b}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-27'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-27&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;%w{a c b} is a short way of saying [&amp;lsquo;a&amp;rsquo;, &amp;lsquo;c&amp;rsquo;, &amp;lsquo;b&amp;rsquo;]. If each element of your array is a single word, then the shorthand will be quicker as you don&amp;rsquo;t have to worry about typing in quotes. So, given our array, [&amp;lsquo;a&amp;rsquo;, &amp;lsquo;c&amp;rsquo;, &amp;lsquo;b&amp;rsquo;] and our block, { |a,b| a &amp;lt; =&gt; b }, we see that they have become alphabetically sorted. The block operates on a pair of values, and compares them with the &amp;lt; =&gt; operator. &amp;lt; =&gt; returns -1 if the left value is lesser, 0 if they are equal, and +1 if the left value is greater. If we want to sort the array in reverse order, we simply swap the order of the values in our block.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w{a c b}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# [&amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Custom_Enumerable_Classes'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Custom_Enumerable_Classes&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;Custom Enumerable Classes&lt;/h3&gt;


&lt;p&gt;If you have your own class, you may want to do things with it as if it were an array. For example, let&amp;rsquo;s say we have a BookShelf class that maintains records of various books we own. One thing we may like to do is print out our books sorted by their author. If we include Enumerable into our BookShelf class, and define the method &amp;lsquo;each&amp;rsquo;, we will be able to write code that might look like the following.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookShelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Great Expectations&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Dickens, C.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Linchpin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Godin, S.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Frankenstien&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Shelly, M.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-29'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-29&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;As you can see, we have an array of hashes, containing an author and a title. They are ordered by the author&amp;rsquo;s name. Here&amp;rsquo;s the BookShelf class that lets us do this.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookShelf&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookAuthor&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookTitle&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookAuthor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;
       &lt;span class=&quot;vi&quot;&gt;@authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;author&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-30'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-30&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We are including the Enumerable class, which means that if we define the method, &amp;lsquo;each&amp;rsquo;, we can call any Enumerable method on the BookShelf class.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-31'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-31&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The each method is defined as&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vi&quot;&gt;@authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;author&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@titles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-32'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-32&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;In English, this says &amp;lsquo;For each author, get me the name of the author and the index. Then I&amp;rsquo;m going to stop (yield) and return the name of the author, and the title of the book that appears in the same position in the titles array&amp;rsquo;. As you can see, it is &amp;lsquo;yield&amp;rsquo; that is doing the magic here. It essentially stops the loop (each_with_index) and spits out the result of the statements that follow it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-33'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-33&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If you want to try it out yourself, you could add some books to the BookShelf like so&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;bookShelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BookShelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bookShelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Great Expectations&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Dickens, C.&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bookShelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Frankenstien&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Shelly, M.&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bookShelf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Linchpin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Godin, S.&amp;#39;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-End'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-End&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;End&lt;/h2&gt;


&lt;p&gt;Phew! That was a lot to take in. Hopefully you&amp;rsquo;ve seen some of the neat methods that the Array class provides, particularly &amp;lsquo;abbrev&amp;rsquo;, as well as how we can make our own classes behave like Enumerable objects. Let me know if you have any questions, comments, and especially criticisms.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby Day 1 Date</title>
   <link href="http://oneofthesedaysblog.com/ruby-day-1-date"/>
   <updated>2010-06-23T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/ruby-day-1-date</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Welcome to the first instalment of 0 to Ruby in 30 days. Today will cover a simple, but useful class: Date.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Most web applications that let users contribute content will likely require the use of date and time functionality. Just consider how useful would a website be that helps people coordinate meetings if there was no way of specifying the time? Also consider how difficult it would be to coordinate a global event, with people in different time zones, if everyone saw the time in GMT +0. Confusion (and possibly hilarity) would undoubtably ensue. Clearly, we need a way to handle dates and times.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Slightly strange motivation aside, let&amp;rsquo;s get started. The format of this tutorial is as follows: I have opened the &lt;a href=&quot;http://ruby-doc.org/core/classes/Date.html&quot;&gt;API reference for the Date class&lt;/a&gt; and will be going through it, testing methods of interest. I have not used the date class before and so at each step, I am guessing the usage based on my limited experience of Ruby gained from &lt;a href=&quot;http://mislav.uniqpath.com/poignant-guide/book/chapter-1.html&quot;&gt;_Why&amp;rsquo;s (Poignant) Guide&lt;/a&gt;. You can consider this tutorial, then, to be an extra reference to the API page, with examples of usage and results of various important methods.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;One of the major differences between the Ruby date library and the PHP date library is the epoch used. PHP uses the date &amp;lsquo;January 1 1970 00:00:00 GMT&amp;rsquo;, the beginning of UNIX, as a reference point. Time is defined as the number of seconds after or before this time. Ruby uses January 1, 4713 BC as its reference point. This is known as the Julian Date, with any date defined by the number of days before or after this reference point. But this is a programming tutorial, not a history lesson, so let&amp;rsquo;s see some code.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Great! We can create a new date object by providing the year, month and day. (Date.new and Date::new seems to function identically). By printing it to the console with puts, we can see that, indeed, this Date object contains the date we specified.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;# 2010-06-22&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Lets get specific parts of the date&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 6&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# 22&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 2010&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;cwday&lt;/strong&gt;
The method &amp;lsquo;cwday&amp;rsquo; gives the Commercial day of the week
Today is Tuesday, the 2nd day of the working week. Sunday is 7, the last day of the week.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cwday&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-8'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-8&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;What happens when we create an invalid date?&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0325&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# ArgumentError: invalid date&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-9'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-9&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We have a basic understanding, so let&amp;rsquo;s start looking at some of the class methods&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-10'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-10&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;day_fraction_to_time&lt;/strong&gt;&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day_fraction_to_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 18003.72423446248771e-17&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;This is equal to 18 hours, 00 minutes, 03 seconds, 0.72.. milliseconds&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-12'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-12&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;time_to_day_fraction&lt;/strong&gt;&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_to_day_fraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 21601/28800&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-13'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-13&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;21601/28800 turns out to be 0.75, the fraction we passed in to day_fraction_to_time.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-14'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-14&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;today&lt;/strong&gt;&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 2010-06-22&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-15'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-15&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;valid_time&lt;/strong&gt;&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid_time?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# nil&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-16'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-16&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;25 hours is not a valid time, hence the result is nil.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-17'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-17&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;&amp;ndash;&lt;/strong&gt;
The &amp;ndash; operator should return a date that is n days earlier than the current one&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2010-03-19&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-18'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-18&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;+ adds days in the same way&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-19'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-19&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt;
The &amp;lt;&amp;lt; operator should return a date that is n months earlier than the current one&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 2010-03-22&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-20'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-20&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&amp;gt;&amp;gt; adds months in the same way&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-21'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-21&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;leap?&lt;/strong&gt;
Is this a leap year?&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leap?&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# false&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-22'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-22&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;go back 2 years&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;    
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leap?&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# true&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-23'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-23&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;next&lt;/strong&gt;
The next day.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 2010-06-23&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-24'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-24&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;So, that&amp;rsquo;s the Date class. Pretty nifty, and very intuitive. But what good is the date without the time? Enter: DateTime&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# -4712-01-01T00:00:00+00:00&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-25'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-25&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Looks like that wasn&amp;rsquo;t sufficient, but note the term &amp;lsquo;-4712&amp;rsquo;. This was the year Ruby set to be the reference time.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2010-06-22T13:56:13+12:00&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-26'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-26&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;There we go
2010-06-22 is the date
T demarcates the time
13:56:13 is the current time
+12:00 is the time zone. I live in New Zealand which is GMT +12&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-27'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-27&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Let&amp;rsquo;s just check that the timezone is correct&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# +12:00&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-28'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-28&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now we&amp;rsquo;ve seen some of the various methods, lets put it to use in a practical example. If you&amp;rsquo;re developing a website, chances are you&amp;rsquo;ll be dealing with people from all over the world. This means you&amp;rsquo;ll be dealing with different time zones, and so every time you work with a date and time you must ensure you have the timezone correct. Let&amp;rsquo;s imagine you&amp;rsquo;re developing &amp;lsquo;Qwitter&amp;rsquo;, a social networking service designed for people who are trying to ween themselves off Twitter. When someone updates their status, their followers want to see the time in their own timezone, so lets define a function to convert a time from a certain timezone, into another&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;time_relative_to_timezone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTimeZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;oldTimeZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;oldTimeZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;timeZoneDifference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldTimeZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTimeZone&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeZoneDifference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-29'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-29&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We can call it like so:&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_relative_to_timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-30'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-30&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;So, what&amp;rsquo;s going on there? Firstly, we are taking the given time and finding it&amp;rsquo;s timezone. The &amp;lsquo;offset&amp;rsquo; method returns the timezone as a fraction of 24 hours. 0.5 would be 12 out of 24, for a timezone difference of +12. Thus, if we multiply this fraction by 24, we get the timezone offset in hours.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-31'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-31&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We then find the difference between this timezone, and the supplied one. We will assume for arguments sake (no pun intended) that the supplied timezone is already an offset given in hours. By subtracting them, we find how different they are.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-32'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-32&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Lastly, recall that when used with a DateTime object, the &amp;ndash; operator subtracts a number of days. If we subtract our time zone difference as a fraction of 24 hours (1 day), we will end up with a new DateTime object with a time that has been adjusted.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-33'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-33&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Obviously we would need to include error handling for invalid arguments, but this has been ocluded for clarity.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-34'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-34&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;End&lt;/strong&gt;
Hopefully this tutorial has shed some light on the Ruby Date, and DateTime classes. If you have any questions, comments, criticisms, praise, please leave a comment or send me an email.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>0 To Ruby In 30 Days</title>
   <link href="http://oneofthesedaysblog.com/0-to-ruby-in-30-days"/>
   <updated>2010-06-22T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/0-to-ruby-in-30-days</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;In an effort to become competent with the Ruby on Rails framework, I&amp;rsquo;ve decided to write up 1 tutorial per day for the next 30 days. Coming from a background in PHP, I will also try to add commentary on similarities/diffe:rences between the two languages. While not all of the topics I intend to cover are relevant to the Rails framework, and web development in general, the experience gained from learning them will hopefully be beneficial by increasing familiarity with the language and its paradigms. I hope that these tutorials become useful to anyone else who is wanting to learn Ruby/Ruby on Rails.&lt;/p&gt;

&lt;p&gt;The topics I will cover are:&lt;/p&gt;

&lt;p&gt;  Array
  Enumerable&lt;/p&gt;

&lt;p&gt;  IO&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipe
tty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  Thread&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mutex
Process
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  Marshall
  Logger
  Observable
  Queue
  Singleton
  Zlib
  Test
  URI
  Yaml
  ERB
  Rails&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord
    Migrations
    Validations
    Associations
ActionMailer
ActionView
    Layouts
    View Helpers
ActionController
    Routing &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Some topics, such as Array and Enumerable, may be combined into a single tutorial as they are quite similar.)&lt;/p&gt;

&lt;p&gt;These tutorials are designed for someone with reasonable programming experience. If you&amp;rsquo;ve been using a language such as PHP for web development, but you feel like something is missing, then this is for you. Before starting the tutorials here, I strongly suggest you sit down in a comfortable chair, make a nice drink, and read through . It is unlike any programming guide you have ever read, and probably will ever read.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Subversion For Code Management</title>
   <link href="http://oneofthesedaysblog.com/subversion-for-code-management"/>
   <updated>2010-06-18T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/subversion-for-code-management</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Gone are the days of a handful of simple html pages to make up a website. Projects can consist of many, many files and, especially with multiple people involved, this can become difficult to manage. From graphics to documentation to source code, a version control system (VCS) is an easy way to manage your project and ensure that nothing important is ever lost. This tutorial will take you through the basics of version control, setting up Subversion server on your PC, and lastly we&amp;rsquo;ll look at how you keep track of your files.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-What_is_a_Version_Control_System_(VCS)?'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-What_is_a_Version_Control_System_(VCS)?&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;What is a Version Control System (VCS)?&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve ever asked yourself the question &amp;ldquo;how can I get back this change that I&amp;rsquo;ve overwritten&amp;rdquo;, &amp;ldquo;this program used to work better before we added that feature&amp;rdquo; or, &amp;ldquo;can you send me the latest copy of your code before I make changes&amp;rdquo;, then a VCS is your answer to them.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;A VCS consists of a central repository which stores all of your project files. It keeps track of the files that are added and will store of all the changes that are made to them. This means that when you update a file, any previously saved work can be recovered by undoing particular updates. Multiple people can save to this same repository and so the VCS also takes care (with some user help, as we shall see) of managing files to ensure that no one can overwrite anyone elses work. Essentially, a VCS is turbo-charged undo/redo history for your computer.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Before we get into setting up a VCS for ourselves, let&amp;rsquo;s take a look at a common problem with VCS and how it&amp;rsquo;s solved. Called the &amp;ldquo;Lost Update&amp;rdquo; problem, it occurs when 2 people are editing the same file at the same time and both want to save their changes. The image below is from the Subversion Book, which is the user guide for a common VCS.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Obviously we don&amp;rsquo;t want something like this happening and fortunately, VCS provide us with 2 methods of ensuring that it doesn&amp;rsquo;t. The first method is called &amp;ldquo;Locking&amp;rdquo; (also known as &amp;ldquo;Reserved Checkouts&amp;rdquo;) and involves &amp;lsquo;locking&amp;rsquo; a file before editing it. &amp;lsquo;Locking&amp;rsquo; the file means that no one else is able to edit the file until it is released again. This ensures that changes cannot be overwritten as there is only ever one person editing the file at a time. While this can cause problems, it offers complete assurance that work will not be overwritten.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The second method is called &amp;ldquo;Merging&amp;rdquo; (also known as &amp;ldquo;Unreserved Checkouts&amp;rdquo;) and involves merging copies of work when the same file has been edited. If the parts of the file that were edited are in different locations then the two files can automatically be merged by the system. If &amp;lsquo;overlap&amp;rsquo; between edited parts occurs however then it is up to the user to manually combine the files. The code examples below illustrates two files that are to be merged both with, and without overlap.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Edit_without_overlap'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Edit_without_overlap&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;Edit without overlap&lt;/h3&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Edit_1:'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Edit_1:&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;Edit 1:&lt;/h4&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$edit1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The cat sat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-9'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-9&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;rest of the code&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Edit_2:'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Edit_2:&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;Edit 2:&lt;/h4&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;rest of the code&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$edit2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;on the mat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-12'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-12&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;As both edits are in different areas of the code, they can be merged with no conflicts.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$edit1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The cat sat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-13'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-13&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;rest of the code&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$edit2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;on the mat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Edit_with_overlap'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Edit_with_overlap&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h3&gt;Edit with overlap&lt;/h3&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Edit_1:'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Edit_1:&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;Edit 1:&lt;/h4&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$edit1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The cat sat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Edit_2:'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Edit_2:&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h4&gt;Edit 2:&lt;/h4&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$edit1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;on the mat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-17'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-17&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;In this case, the same line has been changed in both edits and so they cannot be automatically merged. Differencing tools can be used to find out what exactly is different between the files and so the desired parts of each can be chosen.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-18'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-18&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now that you have a basic understanding of what a VCS is and how they can help, let&amp;rsquo;s look at setting one up and using it&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Installing_Subversion'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Installing_Subversion&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;Installing Subversion&lt;/h2&gt;

&lt;p&gt;There are 2 big version control systems (VCS) in use today, Concurrent Versions System (CVS) and Subversion (SVN). We&amp;rsquo;ll be using SVN because CVS seems to be going out of fashion.
SVN itself does not have a graphical user interface and so to make things more familiar, we&amp;rsquo;ll be using a program called TortoiseSVN to interact with it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-20'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-20&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If you have Apache 2.0 or greater installed then you can grab this release, &lt;a href=&quot;http://subversion.tigris.org/files/documents/15/44049/Setup-Subversion-1.5.3.msi&quot;&gt;here&lt;/a&gt;
If you don&amp;rsquo;t have Apache then you can get a standalone version from Slik SVN, &lt;a href=&quot;http://www.sliksvn.com/pub/Slik-Subversion-1.5.4-win32.msi&quot;&gt;here&lt;/a&gt;. This is the version that we&amp;rsquo;ll be using in this tutorial.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-21'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-21&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Also download TortoiseSVN from &lt;a href=&quot;http://downloads.sourceforge.net/tortoisesvn/TortoiseSVN-1.5.5.14361-win32-svn-1.5.4.msi?download&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-22'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-22&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Once your chosen version of SVN and TortoiseSVN have been downloaded, double click to start installing. Choose the typical install for both programs.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-23'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-23&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;That&amp;rsquo;s all there is to it! You now have a working VCS on your system and a great graphical interface to go with it. There is no program to start up to use SVN as TortoiseSVN integrates straight into the context (right-click) menu in windows explorer. Now let&amp;rsquo;s get right into using it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-Using_SVN'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-Using_SVN&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;h2&gt;Using SVN&lt;/h2&gt;

&lt;p&gt;First of all we need to create a repository. This is where all of the saved project files and version information is kept. Create a new folder on your system and call it &amp;lsquo;MyProject&amp;rsquo;. Right click on this folder and click TortoiseSVN &amp;ndash;&gt; Create repository here.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-25'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-25&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now we need to do what is called &amp;ldquo;checking out&amp;rdquo; the repository. This will create a working directory for us to add files and make changes. Think of this as downloding files from your FTP server in order to work on them locally.
Right click on your desktop and click TortoiseSVN &amp;ndash;&gt; Checkout repository. A dialog box will open asking for the location of your repository. Enter in the path to where you created this. You can also specify what you would like to call your checked out folder. Click OK when you&amp;rsquo;re done. You should now see a newly created folder with a green tick on it. This green tick is a TortoiseSVN icon that means the contents of your folder have the latest versions from the repository.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-26'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-26&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;You may be wondering why we have to create our repository in one place, and check it out in another. The repository is not meant to be edited manually. It contains a number of files and folders which SVN uses to keep track of the changes. You could store this repository anywhere (including on another computer) and check it out in the same way.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-27'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-27&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now let&amp;rsquo;s create a file. We&amp;rsquo;ll deal with a very basic example to demonstrate the key actions so create a text file called numbers.txt in the checked out folder, and paste in the following text&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-28'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-28&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now that we&amp;rsquo;ve made some changes, we need to let SVN know about it. Right click in the folder and click on SVN Commit.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-29'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-29&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;A dialog box will open asking you for a message to save along with the file. It is good practice to always comment on each commit you make. This will allow you to easily see what changes you&amp;rsquo;ve made and is especially helpful when you have multiple people working from the same repository. Enter in a quick sentance about what the file is (TortoiseSVN will give you hints for filenames as you type), tick the check box next to the file and then click OK.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-30'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-30&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Your file has now been saved to the repository and a dialog box will open confirming this. Note that it says &amp;ldquo;Completed at revision 1&amp;rdquo;, each time you commit the revision number will update.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-31'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-31&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now we&amp;rsquo;re able to keep track of our own changes, but what if we want to bring someone else into the project?. Right click on the desktop and checkout the repository again giving it the name &amp;lsquo;DifferentUser&amp;rsquo;. Notice how the icon is not a green tick this time but a red exclamation mark. This means that our folder is not in sync with the repository as we have added a file from the first checkout. Go into this new folder, right click and click SVN Update.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-32'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-32&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;You should now see the numbers.txt file in this folder. Let&amp;rsquo;s make a change to this file. Open it up and replace the number 5 with the number 6. Let&amp;rsquo;s also change the file in the first checkout we created, MyProject. Open the file and add the number 6 after the number 5 on a new line. We&amp;rsquo;ve now created a situation where 2 users have made different changes to the same file at the same time. Commit the changes in MyProject and the folder icon should have a green tick. Now go into the second folder and try to commit. You will get a dialog box pop up informing you that there is a conflict.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-33'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-33&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We can now use TortoiseSVN to help us resolve this conflict. Right click in the folder and click TortoiseSVN &amp;ndash;&gt; Resolve conflicts. This brings up the TortoiseMerge window with which we can do this. The file on the left labelled &amp;lsquo;Theirs&amp;rsquo; is what is in the repository. This should contain the file that we committed from MyProject. The file on the right labelled &amp;lsquo;Mine&amp;rsquo; is what we&amp;rsquo;re trying to commit. The area below labeled &amp;lsquo;Merged&amp;rsquo; is what will be committed once we&amp;rsquo;ve made our changes. There are various options such as appending the files together, taking just one file or manually edit changes. We will manually edit the file in the &amp;lsquo;Merged&amp;rsquo; window and take this to be our new version.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-34'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-34&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;In the &amp;lsquo;Merged&amp;rsquo; section, edit it so that it looks like the code below&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-35'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-35&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now we can save our changes.
We have successfully resolved the conflict and both folders should have green ticks.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-36'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-36&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;While this example was rather trivial, you should now have a grasp on what version control is and how you can use SVN to help manage your projects.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Juicy Fresh Marketing</title>
   <link href="http://oneofthesedaysblog.com/juicy-fresh-marketing"/>
   <updated>2010-06-16T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/juicy-fresh-marketing</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/uploads/2010/06/Screen-shot-2010-06-16-at-10.04.14-PM.png&quot; alt=&quot;Attractive marketing, literally.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It occurred to me today why &lt;a href=&quot;http://www.jucy.co.nz/&quot;&gt;Jucy Car Rentals&lt;/a&gt; works. They have a brand that&amp;rsquo;s cool, saucy, new, that people will want to show off. No one cares if you hired your car from Avis, or Budget, or another boring company. But if it&amp;rsquo;s jucy, someone&amp;rsquo;s going to ask about it. (If you haven&amp;rsquo;t seen, they put suggestively posing women on the side of their campervans.)&lt;/p&gt;

&lt;p&gt;This means that they can put advertising on the cars they rent out. It lets the renter tell a story, so why would they mind?&lt;/p&gt;

&lt;p&gt;They can spend less on traditional (read: boring) advertising because they&amp;rsquo;re not renting cars, they&amp;rsquo;re renting mobile billboards, and so they can charge you less. Win-win.&lt;/p&gt;

&lt;p&gt;Just like you can&amp;rsquo;t out Amazon Amazon, you can&amp;rsquo;t out Avis Avis. But if you&amp;rsquo;re a backpacker, both the price point and the image is appealing, and so the choice is obvious.&lt;/p&gt;

&lt;p&gt;They&amp;rsquo;ve found their &lt;a href=&quot;http://sethgodin.typepad.com/seths_blog/2007/01/how_to_be_remar.html&quot;&gt;remarkable&lt;/a&gt;.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Linchpin Meetup Day</title>
   <link href="http://oneofthesedaysblog.com/linchpin-meetup-day"/>
   <updated>2010-06-15T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/linchpin-meetup-day</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/uploads/2010/06/CD-Audiobook-Cover.jpeg&quot; alt=&quot;Linchpin, by Seth Godin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;June 14th was (and still is, for most of the world at the time of writing) World Linchpin Day.&lt;/p&gt;

&lt;p&gt;This was an event started by Seth Godin on &lt;a href=&quot;http://www.meetup.com/Linchpins-are-everywhere-raise-the-flag/&quot;&gt;meetup.com&lt;/a&gt; for people who are interested in his latest book, &lt;a href=&quot;http://www.amazon.com/Linchpin-Are-Indispensable-Seth-Godin/dp/1591843162/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1276522638&amp;amp;sr=8-1&quot;&gt;Linchpin&lt;/a&gt;. It&amp;rsquo;s a book that asks the question &amp;ldquo;are you indispensable?&amp;rdquo;. It challenges you to think about what you do each day, and see how it adds value or meaning to your life. Manual labour can be difficult, but &amp;lsquo;emotional labour&amp;rsquo; is even harder. Godin talks about how it is essential to put emotional labour into the work we do, to create art and give it away, and to give with no expectation of reciprocation.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.meetup.com/Linchpins-are-everywhere-raise-the-flag/1844/&quot;&gt;meetup page for Auckland&lt;/a&gt;, New Zealand, showed 57 people who were interested. As we could link our Facebook accounts, people were able to read about (stalk) each other before hand. This meant that when I arrived, not only did I not have to give my name, but even my job and background were common knowledge! This really shows the power of social networking, and also how careful you have to be with what you share. I digress, however.&lt;/p&gt;

&lt;p&gt;I had come with expectations about discussing the book itself, and ideas related to it, but it turns out the many people hadn&amp;rsquo;t read it and were there for the networking, meeting people. That turned out to be pretty amazing. All of the people there were operating on a similar page. Entrepreneurship, social ventures, making connections, all things to do with people. This made for lot of interesting and stimulating conversation, sharing our ideas and backgrounds, and getting to know people.&lt;/p&gt;

&lt;p&gt;After the swapping of many business cards, it was eventually time to leave however. Fortunately, being a meetup for Linchpins, the initiative had been taken to put together some resources to keep and grow the connections made. Thanks Alan!&lt;/p&gt;

&lt;p&gt;Being a global event, there were many meetups happening simultaneously. One was a meetup in Japan that was running on &lt;a href=&quot;http://www.junto.cc&quot;&gt;Junto&lt;/a&gt;. It was great to jump in there and meet some great people, and share my experience from the meetup here.&lt;/p&gt;

&lt;p&gt;There are many Linchpins in the world, and many who are but just don&amp;rsquo;t know it yet. I think, if anything, this event has highlighted just how prolific the desire to do meaningful work is. It also shows that sometimes all people need is a word to describe something, and then everything moves forward from there.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Things Done The Linchpin Way</title>
   <link href="http://oneofthesedaysblog.com/getting-things-done-the-linchpin-way"/>
   <updated>2010-06-11T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/getting-things-done-the-linchpin-way</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;a href=&quot;/uploads/2010/06/linchpin.jpeg&quot;&gt;The old kind of linchpin&lt;/a&gt;
I wrote previously about how competitions are a &lt;a href=&quot;http://www.oneofthesedaysblog.com/getting-things-done-the-microsoft-way&quot;&gt;great way of getting things done&lt;/a&gt;. There&amp;rsquo;s a new method that&amp;rsquo;s come up recently, and it&amp;rsquo;s from Seth Godin&amp;rsquo;s book, &lt;a href=&quot;http://www.amazon.com/Linchpin-Are-Indispensable-Seth-Godin/dp/1591843162&quot;&gt;Linchpin&lt;/a&gt;. (If you haven&amp;rsquo;t read it yet, stop reading this, buy it, start reading it, and hold on tight).&lt;/p&gt;

&lt;p&gt;All you need is the desire to make a difference, and then the shipping will follow. Yukie is starting this on her blog, &lt;a href=&quot;http://www.wearethelinchpins.com/&quot;&gt;We Are The Linchpins&lt;/a&gt; by encouraging people to show themselves. By creating an environment for people to make a difference, it&amp;rsquo;s easy to get things done. You feel compelled to work because the work you&amp;rsquo;re doing actually means something.&lt;/p&gt;

&lt;p&gt;By joining the Linchpin community you become surrounded by people who strive to make a difference, who live to ship, and who love what they do. This keeps you inspired and motivated, and helps you aspire to be one as well.&lt;/p&gt;

&lt;p&gt;If an excuse is what you need to get started, then have a look for a Linchpin meet up near you for &lt;a href=&quot;http://www.meetup.com/Linchpins-are-everywhere-raise-the-flag/&quot;&gt;Linchpin Meetup Day on June 14&lt;/a&gt;.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>960 By 640</title>
   <link href="http://oneofthesedaysblog.com/960-by-640"/>
   <updated>2010-06-09T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/960-by-640</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;That&amp;rsquo;s the resolution of the newly announced &lt;a href=&quot;http://www.apple.com/iphone/&quot;&gt;iPhone 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5 years ago we were complaining that it was difficult to design websites that would fit old monitors. The old standard of 800x600 was simply too small to do anything useful with. The table layout, and then the fluid CSS layout helped us cope, but it was still hard to imagine that most people were seeing it through that size a window. Even today it&amp;rsquo;s still hard to imagine people viewing content through such a resolution, because now they&amp;rsquo;re doing it on a phone.&lt;/p&gt;

&lt;p&gt;Multi-tasking, video calling, and HD video are all amazing features, but this new screen is what really amazes me.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve gone from 480,000 pixels on a 15 inch, multiple kilogram weighing, ungainly behemoth of a screen, to over 600,000 pixels on something the size and weight of a pack of cards. Wow.
&lt;img src=&quot;/uploads/2010/06/CRT-4.jpg&quot; alt=&quot;The iPhone 4 gives you better viewing resolution than a CRT monitor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bring on the 1600 x 1050 smartphone.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Dropshorty File Sharing</title>
   <link href="http://oneofthesedaysblog.com/dropshorty-file-sharing"/>
   <updated>2010-06-07T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/dropshorty-file-sharing</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Here&amp;rsquo;s a quick demo of an awesome OSX app, &lt;a href=&quot;http://beefdisciple.com/software/dropshorty/&quot;&gt;DropShorty&lt;/a&gt;&lt;/p&gt;

&lt;object width=&quot;600&quot; height=&quot;468&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/uvhjZDfbe6Q&amp;hl=en_US&amp;fs=1&amp;hd=1&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/uvhjZDfbe6Q&amp;hl=en_US&amp;fs=1&amp;hd=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;600&quot; height=&quot;468&quot;&gt;&lt;/embed&gt;&lt;/object&gt;


&lt;p&gt;Once you&amp;rsquo;ve downloaded it, you need to enter you Dropbox user ID. You can find this on your Dropbox folder online by going in to your shared folder, right clicking on a file and selecting &amp;ldquo;Copy public link&amp;rdquo;. You then need to copy the number in the url, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2010/06/Screen-shot-2010-06-07-at-7.54.54-PM.png&quot; alt=&quot;Right click on a file from your public folder and choose 'Copy public link'&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2010/06/Screen-shot-2010-06-07-at-7.55.07-PM.png&quot; alt=&quot;Copy the number that's in the link. That's your Dropbox ID&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve set this (in Preferences ? + ,) , you can then connect it to to one of your URL shortening accounts.&lt;/p&gt;

&lt;p&gt;Note: The link didn&amp;rsquo;t load first time round because Dropbox was trying to sync 5GB of files I had moved recently.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>The Limits Of Social Networks</title>
   <link href="http://oneofthesedaysblog.com/the-limits-of-social-networks"/>
   <updated>2010-06-04T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/the-limits-of-social-networks</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;When we talk one-on-one and face-to-face with someone, there&amp;rsquo;s a chance they might not like what you say. They could disagree, they could be offended, they could misunderstand you. There&amp;rsquo;s a risk of embarrassment. They know what you said, and you know that they know. There&amp;rsquo;s no escaping it.&lt;/p&gt;

&lt;p&gt;With social networks, there is less risk. If you say something then many people will see it. Some will still disagree, but it&amp;rsquo;s also likely that someone will agree and like what you have to say. From behind your computer, you won&amp;rsquo;t know if someone disagrees until they say so, and so it becomes easier to say things. (Besides, if you&amp;rsquo;re on Facebook, you can always delete their comments).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also less meaning. We lose the raw nature of conversations, and we lose the feedback that drives us to improve. It is also open to all kinds of misinterpretation. There&amp;rsquo;s a limited sense of sarcasm, and other attitudes, that we effortlessly portray and interpret through intonation when we speak.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/2010/06/4-up-on-2010-06-04-at-15.27-2-300x224.jpg&quot; alt=&quot;Perhaps I'm completely wrong. By posting this to my blog it means you don't have to look at such a scary sight all the time!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The person who can fit body language, vocal pitch, intonation, facial expression, appearance, pace of speaking, volume, as well as the words we say, into 140 characters will well and truly change the world.&lt;/p&gt;

&lt;p&gt;NB just look at how many more text comments there are on youtube than video responses. Showing yourself is scary.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>10 Reasons To Buy Things</title>
   <link href="http://oneofthesedaysblog.com/10-reasons-to-buy-things"/>
   <updated>2010-06-04T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/10-reasons-to-buy-things</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;(By &amp;lsquo;Things&amp;rsquo; I&amp;rsquo;m mainly referring to software, music, movies and books.) &lt;a href=&quot;/uploads/2010/06/the-pirate-bay-logo.jpeg&quot;&gt;Pirate Bay&lt;/a&gt;
&lt;strong&gt;For Buying&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;You're rewarding the creator of the content for their invested time and effort.&lt;/li&gt;
    &lt;li&gt;You're likely to get some physical packaging, especially if it's music. This is great if you like collecting things.&lt;/li&gt;
    &lt;li&gt;It's the right thing to do, really.&lt;/li&gt;
    &lt;li&gt;You might get freebies, like free upgrades or bonus tracks, or an author's signature.&lt;/li&gt;
    &lt;li&gt;You'll likely get a support service if you're buying software.&lt;/li&gt;
    &lt;li&gt;If you have a problem with what you've bought, you can ask the creator about it and get help.&lt;/li&gt;
    &lt;li&gt;You can get credit card rewards points.&lt;/li&gt;
    &lt;li&gt;It won't come with any nasty spyware or malicious parts.&lt;/li&gt;
    &lt;li&gt;Some things simply aren't available anywhere other than from the original seller.&lt;/li&gt;
    &lt;li&gt;It's not against the law.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;For Pirating&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;If it's music, chances are the artist gets next to nothing. You're feeding blood sucking, soulless record companies.&lt;/li&gt;
    &lt;li&gt;Packaging just takes up space. Digital copies are the way to go.&lt;/li&gt;
    &lt;li&gt;It's not quite the right thing to do, but who's going to notice?&lt;/li&gt;
    &lt;li&gt;The entire thing is a freebie.&lt;/li&gt;
    &lt;li&gt;The given trial period or trial set of features might not be enough to convince you to buy it. After all, you don't want to buy something that's not quite right.&lt;/li&gt;
    &lt;li&gt;If you have a problem with what you downloaded, you can just find another version elsewhere.&lt;/li&gt;
    &lt;li&gt;I don't need a credit card.. the interest is outrageous!&lt;/li&gt;
    &lt;li&gt;It won't come with any nasty DRM.&lt;/li&gt;
    &lt;li&gt;Some things simply aren't available anywhere other than on torrent sites.&lt;/li&gt;
    &lt;li&gt;It's not against the law in Russia.&lt;/li&gt;
&lt;/ol&gt;


  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Sam Likes This Blog Post</title>
   <link href="http://oneofthesedaysblog.com/sam-likes-this-blog-post"/>
   <updated>2010-06-02T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/sam-likes-this-blog-post</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;A look down my Facebook news feed shows me things like &amp;ldquo;Steve likes &amp;lsquo;I wish i was little again, when the hardest choice was picking a crayon&amp;rsquo; &amp;rdquo;. Other than liking people&amp;rsquo;s business pages, or events, or photos, people are starting to like sentences.&lt;/p&gt;

&lt;p&gt;It turns out there are websites dedicated to listing sentences and phrases that people can &amp;lsquo;like&amp;rsquo;, with the release of Facebook&amp;rsquo;s new Open Graph API.&lt;/p&gt;

&lt;p&gt;One example is &lt;a href=&quot;http://mylike.co.uk/superlike/&quot;&gt;superlike&lt;/a&gt;. Another is &lt;a href=&quot;http://chelick.net&quot;&gt;chelick&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of updating my Facebook status, I can &amp;lsquo;like&amp;rsquo; a series of phrases that other people have said. Due to Facebook&amp;rsquo;s new settings, these likes will be publicly available.&lt;/p&gt;

&lt;p&gt;We are so used to relying on content on the web, that the act of liking even everyday phrases and comments is becoming popular. While it existed before with the many Facebook pages that were available, now it is even simpler. This is similar to re-tweeting on twitter, in a way, except the phrases you &amp;lsquo;like&amp;rsquo; are listed anonymously so you are not celebrating what a person has said, just the content of it.&lt;/p&gt;

&lt;p&gt;Will the next step be personality archetypes that we subscribe to, which automatically publish content in line with what we would say? It&amp;rsquo;s an extreme example, and not likely, I simply find it interesting to watch the trends that appear on social networks.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Things Done The Microsoft Way</title>
   <link href="http://oneofthesedaysblog.com/getting-things-done-the-microsoft-way"/>
   <updated>2010-06-02T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/getting-things-done-the-microsoft-way</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;I recently took park in the world&amp;rsquo;s largest technology competition, the Microsoft Imagine Cup. It&amp;rsquo;s a competition that challenges students to use technology to solve the biggest problems of the world today. Quite a daunting and seemingly unsurmountble task, but clearly it seemed possible to the  300,000 students who entered worldwide.&lt;/p&gt;

&lt;p&gt;Throughout the 6 months I was involved in the competition I learned many things, how to present well, how to gather feedback on ideas, how to work in a new team, etcetera. But above all else, the most important thing it taught me was how to ship.&lt;/p&gt;

&lt;p&gt;(If any of you follow Seth Godin, you&amp;rsquo;ll know what I&amp;rsquo;m talking about.)&lt;/p&gt;

&lt;p&gt;The imagine cup was an excuse to do something. We all have ideas, and we&amp;rsquo;d love to seem them come to fruition. But doesn&amp;rsquo;t that take time, effort (and super powers)? Of course it does! But that&amp;rsquo;s the easy part.&lt;/p&gt;

&lt;p&gt;We put hours and dollars into writing that work report, or doing our tax returns. Boring things that we don&amp;rsquo;t want to do, but have to. Clearly we&amp;rsquo;re good at putting in time and effort when we must.&lt;/p&gt;

&lt;p&gt;So the hard part is getting the effort to go where we want it to. If we take that first step, and step onto the right platform however, it&amp;rsquo;s easy. A competition was my (and my team&amp;rsquo;s) step and platform, and it was fantastic.&lt;/p&gt;

&lt;p&gt;As a result, the idea made it to the top 4 in New Zealand, has now transformed into a real business, and has opened up many opportunities for us to invest time and effort into something worthwhile.&lt;/p&gt;

&lt;p&gt;So if you&amp;rsquo;re stuck with an idea and don&amp;rsquo;t know how or where to start, find a competition that is related to it (there&amp;rsquo;s bound to be one). This will give you the motivation, the environment, and an excuse, to start doing what you really want to do.&lt;/p&gt;

&lt;p&gt;Besides, not only will your idea be coming to life, but you may even win something for it.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Japanese Learning Program</title>
   <link href="http://oneofthesedaysblog.com/japanese-learning-program"/>
   <updated>2010-05-28T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/japanese-learning-program</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If anyone is trying to study Japanese, and wants a list of english:hiragana:kanji readings of common words from which to make a language training program, this may help:
&lt;a href=&quot;/uploads/2010/05/words.txt&quot;&gt;Japanese Words&lt;/a&gt;&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;\ denotes a new definition
the english, hiragana and kanji readings are separated with a colon :&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?????:????&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?????:????&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;I wrote it for final exams for a high school Japanese course. I&amp;rsquo;d like to think that it helped but really it was just a way to justify writing code while I should have been studying.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>A New Kind Of Labrat</title>
   <link href="http://oneofthesedaysblog.com/a-new-kind-of-labrat"/>
   <updated>2010-05-28T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/a-new-kind-of-labrat</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The study of robotics is moving from exorbitantly funded research centre&amp;rsquo;s and organizations to the humble garage workshop. Hobbyist robotics is a growing field and is being adopted all over the world. LabRat is just one of the many platforms that is allowing this to happen.&lt;/p&gt;

&lt;p&gt;Designed to fit inside the body of a typical computer mouse, LabRat gives students, researchers and hobbyists a low-cost, but in depth look into some of the core fundamentals of robotics. From between $120 and $250 (USD) the LabRat provides an 8MHz 8bit AVR processor, optical sensor, touch sensors, Infrared (IR) sensors, IEEE 802.15.4 wireless extensibility, basic IO pins, Gumstix processor extensibility and Pulse Width Modulated (PWM) driving motors that fit neatly on to an open-sourced Printed Circuit Board (PCB). The development environment for the robot is an open-sourced C based library that gives the user exact control over the robot, allowing complete freedom of creativity.&lt;/p&gt;

&lt;p&gt;The open-source nature of the device has accelerated its own design as researchers and students were able to identify bugs and flaws which LabRat could take on board straight away. It has also led to some interesting projects with the device including autonomous charging and wireless control through a playstation controller.&lt;/p&gt;

&lt;p&gt;The majority of this work has come from the Missouri University of Science and Technology, where the LabRat was used as the basis of an introductory robotics course. The device was given to the university before its final release, giving the company time to act on any feedback they received.&lt;/p&gt;

&lt;p&gt;The robot has a unique selling point in its low price and open sourced nature. As it is the only hobby level robot with open-sourced hardware, it is the obvious choice for anyone interested in extending the basic functionalities of the device, which cleverly allies with the market they are targeting. Researchers want a device they can customise to suit their own research areas or courses; students want a device they can take apart and see precisely how it works; hobbyists want a device that they can extend, hack and use in other projects; and certainly all groups want a device that doesn&amp;rsquo;t cost a lot of money.&lt;/p&gt;

&lt;p&gt;The report that was released at the 2009 International Conference on Intelligent Robots and Systems portrays precisely these attributes, providing a perfect sales pitch for those who read it. The background on robotics it provides gives the reader a very clear context in which to read the remainder of the report, and serves to highlight its key benefits and features.&lt;/p&gt;

&lt;p&gt;(note: this was an article review written for a robotics class)&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>The Influence Wall</title>
   <link href="http://oneofthesedaysblog.com/the-influence-wall"/>
   <updated>2010-05-24T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/the-influence-wall</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;It used to be, that if you wanted information on something or someone, you would go to a website about it. Once you arrived, a large number of influencing factors fought for your attention to try and make you stay on the page. The website&amp;rsquo;s appearance, colour scheme, spacing, vibe; its quality of content, user interface experience, even the domain name, had an affect on the site&amp;rsquo;s credibility.&lt;/p&gt;

&lt;p&gt;Then RSS came along and people started syndicating their content into a single stream. The interface and other usability aspects were handled by your RSS reader, leaving only the content to influence you. This placed the focus on the content. All you had to judge someone by was their words.&lt;/p&gt;

&lt;p&gt;Fortunately, however, a person who was publishing content had a lot of words to use. With the advent of twitter, people have just 140 characters to influence someone.&lt;/p&gt;

&lt;p&gt;Profile pictures and twitter backgrounds can influence to an extent, but with so many users using a twitter client, the 140 characters is all there is. (perhaps the number of followers you have is also a factor)&lt;/p&gt;

&lt;p&gt;How do we write such compelling content in such a confined space? Well, we must write snippets. Lots of them. Single thoughts that, over time, build up to a personality. We can then recommend these personalities to people. Find one person who will listen to you, make them happy, and they will talk about you.&lt;/p&gt;

&lt;p&gt;What else can one do?&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Reflection Based Data Layer On Zf 1 10</title>
   <link href="http://oneofthesedaysblog.com/reflection-based-data-layer-on-zf-1-10"/>
   <updated>2010-05-19T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/reflection-based-data-layer-on-zf-1-10</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Working on a new project, I came up with this simple data layer. It uses Zend_Db_Tables to do most of the heavy lifting, but the added layer makes persisting objects a breeze.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Here&amp;rsquo;s how you use it&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application_Model_Persistence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Not much going on, really. The fetch method takes 3 arguments:&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;  &amp;lt;li&amp;gt;The key you want to search on&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;&amp;lt;/u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The object name matches the table name in the database. The fetch method is looking for a model class of the name Application_Model_User, instantiating it, and then querying the database with a query select * where id = 5, from the table Zend_Db_DbTable_User.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The Application_Model_User class is then populated with the returned database data, and subsequently returned to the user.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;A &amp;lsquo;persist&amp;rsquo; method does the opposite. Given an object, it either creates a new entry in the database or updates an existing one.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;At the moment it can only handle primary key selects &amp;ndash; multiple rowsets will probably cause it to crash.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-8'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-8&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;It does really simplify the actual implementation however, as you only need a single object to fetch, update, or create all of your data objects.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-9'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-9&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Calling the fetch method 1000 times takes roughly 6 times longer than a raw sql query, but it&amp;rsquo;s vastly quicker and simpler to implement with, and more convenient as the data is returned as an object.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-10'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-10&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Here&amp;rsquo;s the method
For each type of model that is fetched, the dbTable object is stored here for quick access. Speeds up subsequent accesses in a single request by a factor of 6 or more.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;  
&lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$tableCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Create an Application_Model_Template object of the given type, by selecting from the database querying on the given key with the given value. For example
fetch me a location which has an id of 13
fetch(&amp;lsquo;Location&amp;rsquo;, &amp;lsquo;id&amp;rsquo;, 13);
@return Application_Model_Template
@param string $type
@param string $key
@param mixed $value
@throws Exception &amp;ndash; Class name does not match DbTable name&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$dbTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDbTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$dbTable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zend_Db_Table_Abstract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Class name does not match DbTable name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;		
    
    &lt;span class=&quot;vg&quot;&gt;$select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$dbTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; = ?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$dbTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Application_Model_&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-12'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-12&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Return an Application_Model_DbTable_dbTableName object for the given dbTableName. The tableCache is checked first using dbTableName as the key; if not found it is created, and stored in the cache.
@return Application_Model_DbTable
@param string $dbTableName&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDbTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$dbTableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$dbTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Application_Model_DbTable_&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$dbTableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$dbTableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-13'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-13&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;cache hit&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$dbTableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-14'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-14&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;cache miss&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;        &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$dbTableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$dbTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$dbTableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-15'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-15&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Mistakes, flaws, and potential security threats would be greatly appreciated! It&amp;rsquo;s in no way complete, mainly proof of concept at present. I&amp;rsquo;d like to expand it with some real error checking, let it handle multiple rowsets, etc.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Meeting People</title>
   <link href="http://oneofthesedaysblog.com/meeting-people"/>
   <updated>2010-05-19T00:00:00+12:00</updated>
   <id>http://oneofthesedaysblog.com/meeting-people</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Meeting people is good to do. People love being recognised, and also recognising other people. It makes us human. Meeting people leads to great things. That new job you were looking for, sponsorship for your latest project, a new friend even.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s simply amazing where you meet people. I was sitting in a meeting today (funny, that) and someone came in who I had met a few weeks ago at an event. Neither of us knew that we had anything to do with the group we were both meeting with, but it just so happened that we did. I looked good, he looked good, and the group in the middle looked good as well.&lt;/p&gt;

&lt;p&gt;All because of a chance meeting, which only occurred because of a previous chance meeting, which only occurred.. you get the idea.&lt;/p&gt;

&lt;p&gt;So next time someone wants to have coffee with you, or invites you to some event, just go! Who knows who you will meet there.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Cross Browser Css Dropdown</title>
   <link href="http://oneofthesedaysblog.com/cross-browser-css-dropdown"/>
   <updated>2009-02-28T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/cross-browser-css-dropdown</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The CSS dropdown from the last post works in all browsers except IE6! I&amp;rsquo;ve made a few minor changes to ensure it displays correctly in IE7 however.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    	&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#FFFFFF none repeat scroll 0 0;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#000000;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;720&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;A z-index was applied to keep it above any content that might be below, and a left position was added to move the dropdown over slightly.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now as for IE6, we can get it to work with some simple javascript. Not the most accessible solution but really, if you&amp;rsquo;re using IE6 and you have javascript disabled, you deserve it.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Using jQuery we can add the hover event to our list with a few lines */&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.Navigation ul li&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;overflow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;visible&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;overflow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;and voila! Simply setting the overflow property when each list element is hovered is enough to make the dropdown work.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now if you don&amp;rsquo;t want the extra overhead of the jquery library you can use conditional comments to only grab it if they&amp;rsquo;re using IE.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!--[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IE&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://jqueryjs.googlecode.com/files/jquery-1.3.2.min.js&amp;#39;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;script type=&amp;#39;text/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;$(function() {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  $(&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;).hover(&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  function () {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    $(this).css(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  },&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;  function () {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;    $(this).css(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Pure Css Dropdown For Firefox</title>
   <link href="http://oneofthesedaysblog.com/pure-css-dropdown-for-firefox"/>
   <updated>2009-02-27T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/pure-css-dropdown-for-firefox</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Here&amp;rsquo;s a quick and dirty pure CSS dropdown that at present only works in Firefox.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:orange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#FFFFFF none repeat scroll 0 0;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#000000;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#000; }&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;That&amp;rsquo;s all the CSS needed, along with this HTML:&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Navigation&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;About&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Us&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;            &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;                &amp;lt;li&amp;gt;Sub Link 1&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;                &amp;lt;li&amp;gt;Sub Link 3&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;        &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;By floating each list element as a block element, we can hide the sub menu by hiding the overflow content of the div. Hovering over an element sets overflow to visible, and so the sub menu appears.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now if only it worked in IE..&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Running Yui Rich Text Editor Inside Thickbox</title>
   <link href="http://oneofthesedaysblog.com/running-yui-rich-text-editor-inside-thickbox"/>
   <updated>2009-02-04T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/running-yui-rich-text-editor-inside-thickbox</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rich&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;running&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thickbox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trying&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;few&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;different&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RTEs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Yahoo&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YUI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;looks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nicest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;easily&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;//After 5 lines, YUI editor was up and running inside thickbox. Sweet, no problems there. However the insert image and link boxes failed completely, in all browsers. &lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boxes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;were&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;created&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inserted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alongside&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thickbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instead&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thankfully&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thanks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YUI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;s events this was an easy fix.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;editor.on(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windowInsertImageRender&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;, function() {&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;     document.getElementById(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;).appendChild(this.get(&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;).element);&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;//Here, &amp;quot;dd-editor&amp;quot; is the ID of the div surrounding by YUI editor and &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; is the name of my YUI editor object. We simply set it to listen to the &amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windowInsertImageRender&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; event and, when it occurs, attach it to the same div that the editor is in.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;//That fixed, it seemed to be working very smoothly until, surprise, it fails in IE.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;//![YUI Thickbox Bug](/uploads/2009/02/yui-thickbox-scroll-bug.png)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;//When the thickbox is too small to hold all of the content and scrollbars appear, scrolling down creates all manners of positioning problems with the toolbar. Drilling down with the IE developer toolbar revealed that scrolling works down to the list element with a class of &amp;quot;yui-toolbar-groupitem&amp;quot;. It is the elements inside that bug out.&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;//After an hour of trying various css positionings and styles, I managed to fix the content area and title bar in place with a bit of jquery.&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;$(&amp;quot;#editor_editor&amp;quot;).attr(&amp;quot;position&amp;quot;, &amp;quot;static&amp;quot;)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;//A fix for the buttons was eventually found as well, however it isn&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;much&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sluggish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ungainly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#TB_ajaxContent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;//Hooking in to the scroll event on the thickbox window, each time it moves we collapse and then redisplay the toolbar. This causes the buttons to jump into the correct place at the cost of a very slow scrolling time. &lt;/span&gt;

&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;above&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fulled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rendered&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;only&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowRender&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;windowRender&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#editor_editor&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;position&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#TB_ajaxContent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toolbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>Checking Your Account Data With Zend_http_client</title>
   <link href="http://oneofthesedaysblog.com/checking-your-account-data-with-zend_http_client"/>
   <updated>2009-01-26T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/checking-your-account-data-with-zend_http_client</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;I live in a flat with 2 other avid internet users. Some months our bandwidth gets used up within a week yet my computer tells me I&amp;rsquo;ve only used a few hundred megabytes. In order to get accurate accountability for my internet usage, in comparrison to my flatmates, I wrote a PHP script to give me my usage as a percentage of the total usage for each day.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Our ISP provides a web portal which gives statistics such as daily and monthly usage. To get the statistics from my own usage, I installed &lt;a href=&quot;http://humdi.net/vnstat/&quot;&gt;vnstat&lt;/a&gt;.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Two combine the 2 I decided I would use PHP as an excuse to try out the Zend_Http_Client component.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;First off I needed to grab the stats from my computer. This is quite straightforward with the system() function.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ob_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;vnstat -d -s&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$vnstat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob_get_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ob_end_clean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Output buffering is used to capture the information that the system command normally sends to the browser. As the system command only returns the last line of output from the command, we can get the entire output by using ob_get_contents().&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The options for vnstat make it return statistics for just today (-d) and in short form (-s), looking like this&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;          &lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;estimated&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;wlan0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;yesterday&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;162&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;241&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;138&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;228&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;523&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MB&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now we need to get just the total for today:
make an array of the output&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$vnstatComponents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$vnstat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-8'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-8&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;get today&amp;rsquo;s usage (2nd to last element of the array) and remove whitespace&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$netUsage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$vnstatComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$vnstatComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-9'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-9&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;remove &amp;lsquo;MB&amp;rsquo;, giving us just the number&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$myUsage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$netUsage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$netUsage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-10'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-10&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;We&amp;rsquo;re now ready to start using Zend_Http_Client.
open a link to isp website&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zend_Http_Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https:// the.vodafone.co.nz/acnts/myaccounts.pl/login&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Zend_Http_Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setParameterPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;myusername&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mypassword&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-11'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-11&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;grab our cookies&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$cookiejar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zend_Http_CookieJar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-12'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-12&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The link we open a connection to is the link that the login form will submit to. Firebug can be handy to quickly find this out. You&amp;rsquo;ll also need to set the array keys in the setParameterPost method to match the names of the username and password fields on the login form.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-13'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-13&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;The last part of the code is what will enable us to persist our login credentials. Zend_Http_CookieJar is fairly self explanatory in it&amp;rsquo;s name. We pass in the request object and the uri of the site we&amp;rsquo;re posting to and it will store the cookies that the browser would receive if we were actually visiting the site.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-14'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-14&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now let&amp;rsquo;s try and log in to the usage page with our new cookies.
if we&amp;rsquo;re logged in ok, open account page&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zend_Http_Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https:# the.vodafone.co.nz/acnts/myaccount-int.pl/usage-data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCookieJar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$cookiejar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$usageResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-15'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-15&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;And that&amp;rsquo;s it! We&amp;rsquo;ve now got an object that contains the entire content for the page we specified in the Zend_Http_Client constructor. Now this data might be a little unwieldy to dissect so we can use another handy Zend component, Zend_Dom_Query.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$dom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Zend_Dom_Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$usageResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-16'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-16&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If you have any experience with CSS then the usage of this object for getting data will seem quite natural.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;span class=&quot;vg&quot;&gt;$dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.tdDataRight&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-17'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-17&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;This will return an array of all elements with the class &amp;lsquo;tdDataRight&amp;rsquo;.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-18'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-18&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;While this example is rather specific, it shows how to use Zend_Http_Client in a way that will no doubt apply to many other situations.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 <entry>
   <title>New On The Blog Scene</title>
   <link href="http://oneofthesedaysblog.com/new-on-the-blog-scene"/>
   <updated>2009-01-24T00:00:00+13:00</updated>
   <id>http://oneofthesedaysblog.com/new-on-the-blog-scene</id>
   <content type="html">&lt;tr id='section-1'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-1&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;After reading many blogs for many months I have finally managed to enter the blogosphere.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-2'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-2&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;First, a little about myself. I&amp;rsquo;m currently in my third year of studying Software Engineering at the University of Auckland, New Zealand. I&amp;rsquo;ve also been doing freelance web development for the better part of 4 years. I also have a job as a developer/IT support guy at a company that deals with online learning solutions.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-3'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-3&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;I love to work with PHP; it&amp;rsquo;s a very no fuss language that gives you a lot of flexibility, while still providing the strength required to make complex applications. As far as frameworks go, I&amp;rsquo;m all for them and use the Zend Framework.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-4'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-4&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;I&amp;rsquo;ve also worked with the .NET framework with C# for both web and windows development and I have to say that I really enjoy using it. It&amp;rsquo;s a very powerful system that makes coding easy and fun. Unfortunately it&amp;rsquo;s not so great to develop from a Linux machine, which is my primary computer, and the licensing costs are only viable when you have a company paying for everything.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-5'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-5&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;If you&amp;rsquo;re interested in some of my work, check out my portfolio at &lt;a href=&quot;http://www.samdalton.com&quot;&gt;www.samdalton.co.nz&lt;/a&gt;.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-6'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-6&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;Now that work is out of the way, some more about my personal self.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-7'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-7&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;I&amp;rsquo;m an absolute music nut and spend my days listening to the likes of Pink Floyd, Led Zeppelin, Beethoven, Bach, Miles Davis, BB King, Tool, The Doors, Don McLean and other such blues/classic rock/classical/jazz bands, artists and composers. I&amp;rsquo;ve been learning Japanese for about 8 years now and really enjoy doing so. I play guitar in a band too.&lt;/p&gt;
  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr id='section-8'&gt;
  &lt;td class=docs&gt;
    &lt;div class=&quot;pilwrap&quot;&gt;
      &lt;a class=&quot;pilcrow&quot; href=&quot;#section-8&quot;&gt;&amp;#182;&lt;/a&gt;
    &lt;/div&gt;
    &lt;p&gt;What&amp;rsquo;s my reason for blogging? Many times I&amp;rsquo;ve found a solution to a problem that I simply was not able to find on the internet. I hope that by posting about problems and solutions that I come across, it will help others who find themselves in the same spot. As well as this, it&amp;rsquo;s a place for me to collect my thoughts and write about things that interest me, and hopefully others.&lt;/p&gt;

  &lt;/td&gt;
  &lt;td class=code&gt;
    &lt;div class='highlight'&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</content>
 </entry>
 
 
</feed>

